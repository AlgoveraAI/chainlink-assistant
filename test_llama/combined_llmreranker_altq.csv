question,source,answer,result,retrieved_docs,right_or_wrong,rd_right_or_wrong
What is Web 3.0?,https://www.chainlink.education/chainlinkIntroduction/chapter-1,"In Web 1.0, the internet was a static place where web pages and content were created and owned by a single entity (i.e., a website for the news such as the New York Times, where they curated and owned all articles). In Web 2.0, which we are currently moving away from, applications are created to allow users to create their own content on web pages. This content and the web page are still owned by a single entity (think users creating content on Facebook). These web pages are well known as ‚ÄúWeb Apps‚Äù.

Web 2.0 isn‚Äôt a fair, equitable place for the users generating all this content and data. The centralized entities who control these web apps can and have un-equitably profited from all the content that their users  generated. Enter Web 3.0: the future of the internet we are moving towards. In Web 3.0, web apps (and the content generated within them) can be created and not be controlled by any centralized entity. These decentralized apps, or Dapps, are completely open and transparent, and can distribute any generated profits more equitably.

The future of the internet, dubbed Web 3.0, is being built in front of our eyes so let's dive in and start building the future!","Web 3.0 is the future of the internet where web apps and the content generated within them can be created and not be controlled by any centralized entity. These decentralized apps, or Dapps, are completely open and transparent, and can distribute any generated profits more equitably.","looking to use smart contracts to improve their business processes, artists and athletes like [LaMelo Ball](https://blog.ether.cards/lamelo-ball-nft/) creating their own ‚ÄúNFTs,‚Äù or up and coming companies looking to disrupt long-standing establishments such as the [insurance](https://www.arbolmarket.com/) industry, Chainlink and smart contracts are working to become the backbone for world-changing applications.

<Spacer />

## What is Web 3.0?

In Web 1.0, the internet was a static place where web pages and content were created and owned by a single entity (i.e., a website for the news such as the New York Times, where they curated and owned all articles). In Web 2.0, which we are currently moving away from, applications are created to allow users to create their own content on web pages. This content and the web page are still owned by a single entity (think users creating content on Facebook). These web pages are well known as ‚ÄúWeb Apps‚Äù.

Web 2.0 isn‚Äôt a fair, equitable place for the users generating all this content and data. The centralized entities who control these web apps can and have un-equitably profited from all the content that their users  generated. Enter Web 3.0: the future of the internet we are moving towards. In Web 3.0, web apps (and the content generated within them) can be created and not be controlled by any centralized entity. These decentralized apps, or Dapps, are completely open and transparent, and can distribute any generated profits more equitably.

The future of the internet, dubbed Web 3.0, is being built in front of our eyes so let's dive in and start building the future!


:::NEXT DOC:::

#####Chapter 1:

# What will this course cover?

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
    You are a digital artist, and have heard about the NFT (Non-Fungible Token) revolution making waves through the art community. You want to take part in it, but know nothing about  the technology underpinning NFTs.
    </div>
  </div>
</ContentWrapp>

Chainlink, smart contracts, blockchains, and the entire world of cryptocurrency have been a hot topic of discussion for several years now. Whether it‚Äôs companies like [EY and Microsoft](https://consensys.net/blog/press-release/ey-and-consensys-announce-formation-of-baseline-protocol-initiative-to-make-ethereum-mainnet-safe-and-effective-for-enterprises/) looking to use smart contracts to improve their business processes, artists and athletes like [LaMelo Ball](https://blog.ether.cards/lamelo-ball-nft/) creating their own ‚ÄúNFTs,‚Äù or up and coming companies looking to disrupt long-standing establishments such as the [insurance](https://www.arbolmarket.com/) industry, Chainlink and smart contracts are working to become the backbone for world-changing applications.

<Spacer />

## What is Web 3.0?

In Web 1.0, the internet was a static place where web pages and content were created and owned by a single entity (i.e., a website for

:::NEXT DOC:::

In Web 1.0, the internet was a static place where web pages and content were created and owned by a single entity (i.e., a website for the news such as the New York Times, where they curated and owned all articles). In Web 2.0, which we are currently moving away from, applications are created to allow users to create their own content on web pages.


:::NEXT DOC:::

#####Chapter 1:

What will this course cover?
=============================

***Chainlink, smart contracts, blockchains, and the entire world of cryptocurrency have been a hot topic of discussion for several years now.***

Whether it‚Äôs companies like EY and Microsoft looking to use smart contracts to improve their business processes, artists and athletes like LaMelo Ball creating their own‚ÄúNFTs‚Äù, or up and coming companies looking to disrupt long standing industries such as insurance, Chainlink and smart contracts are looking to be the backbone for world changing applications.

The future of the internet, dubbed Web3.0, is being built in front of our eyes so let's dive in and start building the future! But wait, Chainlink? Smart contracts? Doesn‚Äôt blockchain have something to do with that Bitcoin stuff some people buy? In this course we will build up the intuition on what Chianlink is and the problems it solves.

## What are Contracts?
Agreements, deals, promises; these are concepts that humans seem to universally have an intuition on across cultures. Maybe as a child you agreed to trade 3 of your toys for 1 friend‚Äôs rare toy.

![The San Juan Mountains are beautiful!](/image_md.png ""test image"")

Or maybe you‚Äôve agreed to lend your car to your friend as long as they don‚Äôt put more than 100 miles on it and bring it back with a full tank. Or maybe you make an agreement with your health coach that you wont eat more than 2,500 calories a day.

<BlueParagraph>
    These are all examples of agreements and agreements can be spoken orally, written down on paper, or even typed in digital documents. Enforcement of agreements are handled outside of courts: you will probably lose

:::NEXT DOC:::

Now we will give our smart contract a name. The classic first programming exercise is called ‚ÄúHelloWorld‚Äù but this is Web3 so lets call it ‚ÄúHelloWeb3‚Äù.


:::NEXT DOC:::

Name                      | Description                       | GitHub   |
|:--------------------------|:----------------------------------|:---------|
| deBridge ü•á               | Cross-chain defi primative        | Go       |
| Vulcan Exchange ü•á        | Weather derivatives defi platform | Go       |
| DeFi Lending Insurance ü•á | DeFi Lending Insurance            | Go       |
| Fract ü•á                  | Dynamic NFT no-code UI creator    | nan      |
## ETH Global's ETHOnline 2020

The [ETH Online](https://ethglobal.online/), read our [blog
here!](https://blog.chain.link/ethonline-2020-chainlink-hackathon-winners/)

| Name         | Description                                         | GitHub   |
|:-------------|:----------------------------------------------------|:---------|
| Iroiro ü•á    | Decentralized Creators Support Platform.            | Go       |
| Overlay ü•á   | Long/Short data stream derivatives.                 | Go       |
| Rupia ü•á     | An Indian Rupee (INR) Stablecoin Derivative.        | Go       |
| SecretPay ü•á | Buy ETH Privately

:::NEXT DOC:::

with the use of cryptography and game theory (a combination of math and sociology).

You may have heard of a cryptocurrency called Bitcoin. Bitcoin is built on a blockchain (referred to as the <i>Bitcoin blockchain</i>)! No one entity controls Bitcoin so it can be thought of as a sort of ‚Äúproto-smartcontract‚Äù. It has all the properties of smart contracts listed before, but only has one use: transferring value between individuals.

Today, there are blockchains where <i>any</i> code or applications can be built from. The code deployed to a blockchain is indeed a Smart Contract. This ability was truly pioneered by the Ethereum blockchain, but there are many other blockchains such as Polygon, Avalanche, Solana, Terra, and many others have the same capability. Smart contracts are often written in a programming language called <ColorWord>Solidity</ColorWord>, but others such as Rust are gaining popularity.

<MissionContainer>
  <div className=""title"">Activities:</div>
  <ul className=""mission-goals"">
    <li>
      Watch <a target=""__blank"" href=""https://www.youtube.com/watch?v=_160oMzblY8""> Anders Brownsworth video walkthrough </a> of his blockchain demo.
    </li>
    <li>
      Interact with the <a target=""__blank"" href=""https://andersbrownworth.com/blockchain/hash""> blockchain demo </a> yourself until you have a good understanding of the basics of how blockchains operate.
    </li>
  </ul>
</MissionContainer>


:::NEXT DOC:::

Name                    | Description                                           | GitHub   |
|:------------------------|:------------------------------------------------------|:---------|
| Link My Ride ü•á         | A decentralized Tesla rental platform.                | Go       |
| Farm Together ü•á        | A farming game where you can earn real yield in defi. | Go       |
| Open Library Project ü•á | A library platform for borrowing books on-chain.      | Go       |
## ETHGlobal Hack Money

The [Hack Money hackathon](https://ethglobal.online/), read our [blog
here!](https://blog.chain.link/showcasing-the-winners-of-the-2020-hackmoney-virtual-hackathon/)

| Name          | Description                                                          | GitHub   |
|:--------------|:---------------------------------------------------------------------|:---------|
| Genie ü•á      | A no-loss betting platform for gamers.                               | Go       |
| DefiDollar ü•à | DefiDollar (DUSD) is a stablecoin backed by Curve Finance LP tokens. | Go       |
| CandyShop ü•â  | Lottery based arbitrage.         

:::NEXT DOC:::

# Chainlink Introduction

<GradientTextWrapp>
  Chainlink, smart contracts, blockchains, and the entire world of cryptocurrency have been a hot topic of discussion for several years now.
</GradientTextWrapp>

Whether it‚Äôs companies like EY and Microsoft looking to use smart contracts to improve their business processes, artists and athletes like LaMelo Ball creating their own ‚ÄúNFTs,‚Äù or up and coming companies looking to disrupt long-standing establishments such as the insurance industry, Chainlink and smart contracts are working to become the backbone for world-changing applications.

 


:::NEXT DOC:::

  ]
            }
        }
    ]

## Web

The `Web` initiator enables jobs to be triggered via web requests,
specifically `POST`s to `/v2/specs/:jobID/runs`. Requests coming in to create
new job runs must be authenticated by cookie.

note

For convenience, there is a ""Run"" button in the operator web UI for the job
which will trigger a job run.

### Web Parameters

`Web` currently takes no parameters.

### Example


    ""initiators"": [
        {
            ""type"": ""web""
        }
    ]

## What's next

  * [‚Ä∫ Introduction to External Initiators](/chainlink-nodes/external-initiators/external-initiators-introduction)

  * [ Edit this page ](https://github.com/smartcontractkit/documentation/tree/main/src/pages/chainlink-nodes/oracle-jobs/v1/initiators.mdx)
  * [ Join our community ](https://discord.com/invite/aSK4zew)

",right,
What is a contractual agreement?,https://www.chainlink.education/chainlinkIntroduction/chapter-2,"Contracts are agreements that are enforceable in a court of law. You may have signed a leasing contract to rent an apartment or house. Restaurateurs typically sign contracts with food suppliers to obtain necessary ingredients at a specific price and time no matter what happens in different food markets. You may sign an employment agreement with a company to establish your pay rate and employee benefits. In any form, once these contractual agreements have been made, they are enforced by a court of law. Any clause that is not fulfilled within a contract can be disputed and discussed within the court.","A contractual agreement is an enforceable agreement that is made between parties and can be written down on paper or typed in digital documents. It is expected that if the terms of the agreement are not executed as written, they will be enforced by a court of law.","concepts that humans seem to universally have an intuition on across cultures. Maybe as a child you agreed to trade 3 of your toys for 1 friend‚Äôs rare toy.

![The San Juan Mountains are beautiful!](/image_md.png ""test image"")

Or maybe you‚Äôve agreed to lend your car to your friend as long as they don‚Äôt put more than 100 miles on it and bring it back with a full tank. Or maybe you make an agreement with your health coach that you wont eat more than 2,500 calories a day.

<BlueParagraph>
    These are all examples of agreements and agreements can be spoken orally, written down on paper, or even typed in digital documents. Enforcement of agreements are handled outside of courts: you will probably lose trust in your friend who brings back your car with 600 miles on it and an almost empty tank of gas.
</BlueParagraph>

Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Thus enforcement of standard agreements is often kind of ‚Äúwishy washy‚Äù and based on many hard measure factors such as reputation impact.

Contracts are agreements that are enforceable in a court of law. Maybe you‚Äôve signed a leasing contract to rent an apartment or house. Perhaps you‚Äôve run a restaurant and signed a futures contract with food suppliers to get corn at a specific price and time no matter what happens in the corn market.

Or perhaps you‚Äôve signed an employment agreement with the company you work for on what your pay rate will be and what benefits you will have. Either way, once these contractual agreements have been made it is expected that if they are not executed how they were written they will be enforced by a court of law i.e. a government and

:::NEXT DOC:::

5,000 calories a day for the past week. Thus enforcement of standard agreements is often kind of ‚Äúwishy washy‚Äù and based on many hard measure factors such as reputation impact.

Contracts are agreements that are enforceable in a court of law. Maybe you‚Äôve signed a leasing contract to rent an apartment or house. Perhaps you‚Äôve run a restaurant and signed a futures contract with food suppliers to get corn at a specific price and time no matter what happens in the corn market.

Or perhaps you‚Äôve signed an employment agreement with the company you work for on what your pay rate will be and what benefits you will have. Either way, once these contractual agreements have been made it is expected that if they are not executed how they were written they will be enforced by a court of law i.e. a government and the power they have.


:::NEXT DOC:::

as a child. Perhaps you‚Äôve decided to lend your car to a friend as long as they don‚Äôt put more than 100 miles on it and return it with a full tank. You may have even agreed with your health coach not to eat more than 2,500 calories per day.

These are all examples of agreements. Agreements can be spoken orally, written down on paper, or even typed in digital documents. The enforcement of such agreements is oftentimes informal and ‚Äúwishy washy.‚Äù Disagreement is handled outside of courts or other formal institutions: a friend who brings back your car with 600 miles on it and an almost empty tank of gas loses your trust. Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Though factors such as reputation, magnitude, and parties within an agreement can affect its enforcement, there is no guarantee that an agreement will be fulfilled.

Contracts are agreements that are enforceable in a court of law. You may have signed a leasing contract to rent an apartment or house. Restaurateurs typically sign contracts with food suppliers to obtain necessary ingredients at a specific price and time no matter what happens in different food markets. You may sign an employment agreement with a company to establish your pay rate and employee benefits. In any form, once these contractual agreements have been made, they are enforced by a court of law. Any clause that is not fulfilled within a contract can be disputed and discussed within the court.

<MissionContainer>
  <div className=""title"">Arbitration Court</div>
    <div className=""description"">
    In fact, legal contracts have become so notoriously difficult to enforce more companies have been putting

:::NEXT DOC:::

#####Chapter 2:

# What are Contracts?

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     When you buy an artwork, you sign a contract between you and the artist or seller. This contract provides you with proof of ownership of the artwork. But it is possible to forge it and not follow the agreement. The seller could decide not to send the artwork to you though you already paid for it.
    </div>
  </div>
</ContentWrapp>

Agreements, deals, promises: these are concepts that humans universally have an intuition for across cultures. Maybe you agreed to trade three of your toys for one friend‚Äôs rare toy as a child. Perhaps you‚Äôve decided to lend your car to a friend as long as they don‚Äôt put more than 100 miles on it and return it with a full tank. You may have even agreed with your health coach not to eat more than 2,500 calories per day.

These are all examples of agreements. Agreements can be spoken orally, written down on paper, or even typed in digital documents. The enforcement of such agreements is oftentimes informal and ‚Äúwishy washy.‚Äù Disagreement is handled outside of courts or other formal institutions: a friend who brings back your car with 600 miles on it and an almost empty tank of gas loses your trust. Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Though factors such as

:::NEXT DOC:::

fulfilled.

Contracts are agreements that are enforceable in a court of law. You may have signed a leasing contract to rent an apartment or house. Restaurateurs typically sign contracts with food suppliers to obtain necessary ingredients at a specific price and time no matter what happens in different food markets. You may sign an employment agreement with a company to establish your pay rate and employee benefits. In any form, once these contractual agreements have been made, they are enforced by a court of law. Any clause that is not fulfilled within a contract can be disputed and discussed within the court.

<MissionContainer>
  <div className=""title"">Arbitration Court</div>
    <div className=""description"">
    In fact, legal contracts have become so notoriously difficult to enforce more companies have been putting ""arbitration"" clauses in their contracts. This means a private arbitration court is used to uphold the contract rather than a public judicial court. There has been a lot of controversy surrounding arbitration courts. You can read more about the history of arbitration courts in <a href=""https://www.americanbar.org/groups/tort_trial_insurance_practice/publications/the_brief/2018-19/summer/a-brief-history-arbitration/""> this article by the American Bar Association </a>.
    </div>
</MissionContainer>


:::NEXT DOC:::

or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.

Customers also tend not to read these agreements due to lengthy, complex legalese. Oftentimes digital agreements give consumers very little recourse at all! Due to these reasons, the power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers. A prime example of this is the <a style=""color:blue"" href=""https://www.jama.work/blog/on-robinhood-and-availability""> Robinhood Gamestop downtime incident</a>.

<MissionContainer>
  <div className=""title"">What are the SLAs you have agreed to?</div>
    <div className=""description"">
    Think about any digital services you subscribe to, for example video streaming or banking services. Do you know the terms of the SLAs between you and the service provider? If not, take the time and read over one of them.
    </div>
</MissionContainer>


:::NEXT DOC:::

#####Chapter 3:

# Digital Agreements - What we have Today

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
    When you buy an artwork on an online platform, you must agree to the Service Level Agreements. They are usually overly complex and can be challenging to understand. They primarily benefit the platform owner, not the users.
    </div>
  </div>
</ContentWrapp>

Digital agreements have been the most common format of agreements in the past decade. From bank agreements to social media, to Netflix, and crypto exchanges, companies who provide services on the internet typically use digital agreements to detail the exact conditions of the service to be provided. These are called SLAs or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.

Customers also tend not to read these agreements due to lengthy, complex legalese. Oftentimes digital agreements give consumers very little recourse at all! Due to these reasons, the power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers. A prime example of this is the <a style=""color:blue""

:::NEXT DOC:::

#####Chapter 1:

What will this course cover?
=============================

***Chainlink, smart contracts, blockchains, and the entire world of cryptocurrency have been a hot topic of discussion for several years now.***

Whether it‚Äôs companies like EY and Microsoft looking to use smart contracts to improve their business processes, artists and athletes like LaMelo Ball creating their own‚ÄúNFTs‚Äù, or up and coming companies looking to disrupt long standing industries such as insurance, Chainlink and smart contracts are looking to be the backbone for world changing applications.

The future of the internet, dubbed Web3.0, is being built in front of our eyes so let's dive in and start building the future! But wait, Chainlink? Smart contracts? Doesn‚Äôt blockchain have something to do with that Bitcoin stuff some people buy? In this course we will build up the intuition on what Chianlink is and the problems it solves.

## What are Contracts?
Agreements, deals, promises; these are concepts that humans seem to universally have an intuition on across cultures. Maybe as a child you agreed to trade 3 of your toys for 1 friend‚Äôs rare toy.

![The San Juan Mountains are beautiful!](/image_md.png ""test image"")

Or maybe you‚Äôve agreed to lend your car to your friend as long as they don‚Äôt put more than 100 miles on it and bring it back with a full tank. Or maybe you make an agreement with your health coach that you wont eat more than 2,500 calories a day.

<BlueParagraph>
    These are all examples of agreements and agreements can be spoken orally, written down on paper, or even typed in digital documents. Enforcement of agreements are handled outside of courts: you will probably lose

:::NEXT DOC:::

#####Chapter 4:

# Smart Contracts - The Future

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Check out this video on what smart contracts are and how they are changing the nature of agreements and the Internet. 
    </div>
  </div>
</ContentWrapp>

<VideoBox>
  <iframe  src=""https://www.youtube.com/embed/Un7-hW6GAec"" title=""YouTube video player"" frameborder=""0"" allow=""accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>
</VideoBox>

Smart contracts result from the evolution of digital agreements. A smart contract is a self-executing contract with the terms of the agreement being directly written into computer code. Smart contracts provide the following benefits:

<ListItemsContainer>
  <div class=""wrapp"">
    <p class=""list__label""><b>Reliable, Guaranteed Execution</b></p>
    <ul class=""list__items"">
      <li class=""list__item"">
        <p>
   In traditional agreements, the execution and enforcement of the terms detailed within the contract is highly dependent on the signing parties; this may not happen immediately or at all. In terms of smart contracts, none of the parties have control over the execution or enforcement of contract terms.
   <b>Example:</b> In the insurance industry, the contract

:::NEXT DOC:::

Smart contracts result from the evolution of digital agreements. A Smart contract is a self-executing contract with the terms of the agreement being directly written into computer code.
",right,
What is a digital agreement?,https://www.chainlink.education/chainlinkIntroduction/chapter-3,"Digital agreements have been the most common format of agreements in the past decade. From bank agreements to social media, to Netflix, and crypto exchanges, companies who provide services on the internet typically use digital agreements to detail the exact conditions of the service to be provided. These are called SLAs or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.","A digital agreement is a format of agreements used by companies who provide services on the internet to detail the exact conditions of the service to be provided. They are enforced in a court of law under certain circumstances but are often not read by customers due to lengthy, complex legalese. The power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers.","#####Chapter 3:

# Digital Agreements - What we have Today

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
    When you buy an artwork on an online platform, you must agree to the Service Level Agreements. They are usually overly complex and can be challenging to understand. They primarily benefit the platform owner, not the users.
    </div>
  </div>
</ContentWrapp>

Digital agreements have been the most common format of agreements in the past decade. From bank agreements to social media, to Netflix, and crypto exchanges, companies who provide services on the internet typically use digital agreements to detail the exact conditions of the service to be provided. These are called SLAs or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.

Customers also tend not to read these agreements due to lengthy, complex legalese. Oftentimes digital agreements give consumers very little recourse at all! Due to these reasons, the power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers. A prime example of this is the <a style=""color:blue""

:::NEXT DOC:::

or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.

Customers also tend not to read these agreements due to lengthy, complex legalese. Oftentimes digital agreements give consumers very little recourse at all! Due to these reasons, the power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers. A prime example of this is the <a style=""color:blue"" href=""https://www.jama.work/blog/on-robinhood-and-availability""> Robinhood Gamestop downtime incident</a>.

<MissionContainer>
  <div className=""title"">What are the SLAs you have agreed to?</div>
    <div className=""description"">
    Think about any digital services you subscribe to, for example video streaming or banking services. Do you know the terms of the SLAs between you and the service provider? If not, take the time and read over one of them.
    </div>
</MissionContainer>


:::NEXT DOC:::

#####Chapter 2:

# What are Contracts?

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     When you buy an artwork, you sign a contract between you and the artist or seller. This contract provides you with proof of ownership of the artwork. But it is possible to forge it and not follow the agreement. The seller could decide not to send the artwork to you though you already paid for it.
    </div>
  </div>
</ContentWrapp>

Agreements, deals, promises: these are concepts that humans universally have an intuition for across cultures. Maybe you agreed to trade three of your toys for one friend‚Äôs rare toy as a child. Perhaps you‚Äôve decided to lend your car to a friend as long as they don‚Äôt put more than 100 miles on it and return it with a full tank. You may have even agreed with your health coach not to eat more than 2,500 calories per day.

These are all examples of agreements. Agreements can be spoken orally, written down on paper, or even typed in digital documents. The enforcement of such agreements is oftentimes informal and ‚Äúwishy washy.‚Äù Disagreement is handled outside of courts or other formal institutions: a friend who brings back your car with 600 miles on it and an almost empty tank of gas loses your trust. Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Though factors such as

:::NEXT DOC:::

concepts that humans seem to universally have an intuition on across cultures. Maybe as a child you agreed to trade 3 of your toys for 1 friend‚Äôs rare toy.

![The San Juan Mountains are beautiful!](/image_md.png ""test image"")

Or maybe you‚Äôve agreed to lend your car to your friend as long as they don‚Äôt put more than 100 miles on it and bring it back with a full tank. Or maybe you make an agreement with your health coach that you wont eat more than 2,500 calories a day.

<BlueParagraph>
    These are all examples of agreements and agreements can be spoken orally, written down on paper, or even typed in digital documents. Enforcement of agreements are handled outside of courts: you will probably lose trust in your friend who brings back your car with 600 miles on it and an almost empty tank of gas.
</BlueParagraph>

Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Thus enforcement of standard agreements is often kind of ‚Äúwishy washy‚Äù and based on many hard measure factors such as reputation impact.

Contracts are agreements that are enforceable in a court of law. Maybe you‚Äôve signed a leasing contract to rent an apartment or house. Perhaps you‚Äôve run a restaurant and signed a futures contract with food suppliers to get corn at a specific price and time no matter what happens in the corn market.

Or perhaps you‚Äôve signed an employment agreement with the company you work for on what your pay rate will be and what benefits you will have. Either way, once these contractual agreements have been made it is expected that if they are not executed how they were written they will be enforced by a court of law i.e. a government and

:::NEXT DOC:::

as a child. Perhaps you‚Äôve decided to lend your car to a friend as long as they don‚Äôt put more than 100 miles on it and return it with a full tank. You may have even agreed with your health coach not to eat more than 2,500 calories per day.

These are all examples of agreements. Agreements can be spoken orally, written down on paper, or even typed in digital documents. The enforcement of such agreements is oftentimes informal and ‚Äúwishy washy.‚Äù Disagreement is handled outside of courts or other formal institutions: a friend who brings back your car with 600 miles on it and an almost empty tank of gas loses your trust. Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Though factors such as reputation, magnitude, and parties within an agreement can affect its enforcement, there is no guarantee that an agreement will be fulfilled.

Contracts are agreements that are enforceable in a court of law. You may have signed a leasing contract to rent an apartment or house. Restaurateurs typically sign contracts with food suppliers to obtain necessary ingredients at a specific price and time no matter what happens in different food markets. You may sign an employment agreement with a company to establish your pay rate and employee benefits. In any form, once these contractual agreements have been made, they are enforced by a court of law. Any clause that is not fulfilled within a contract can be disputed and discussed within the court.

<MissionContainer>
  <div className=""title"">Arbitration Court</div>
    <div className=""description"">
    In fact, legal contracts have become so notoriously difficult to enforce more companies have been putting

:::NEXT DOC:::

Smart contracts result from the evolution of digital agreements. A Smart contract is a self-executing contract with the terms of the agreement being directly written into computer code.


:::NEXT DOC:::

When you buy an artwork on an online platform, you must agree to the Service Level Agreements. They are usually overly complex and can be challenging to understand. They primarily benefit the platform owner, not the users.


:::NEXT DOC:::

5,000 calories a day for the past week. Thus enforcement of standard agreements is often kind of ‚Äúwishy washy‚Äù and based on many hard measure factors such as reputation impact.

Contracts are agreements that are enforceable in a court of law. Maybe you‚Äôve signed a leasing contract to rent an apartment or house. Perhaps you‚Äôve run a restaurant and signed a futures contract with food suppliers to get corn at a specific price and time no matter what happens in the corn market.

Or perhaps you‚Äôve signed an employment agreement with the company you work for on what your pay rate will be and what benefits you will have. Either way, once these contractual agreements have been made it is expected that if they are not executed how they were written they will be enforced by a court of law i.e. a government and the power they have.


:::NEXT DOC:::

#####Chapter 4:

# Smart Contracts - The Future

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Check out this video on what smart contracts are and how they are changing the nature of agreements and the Internet. 
    </div>
  </div>
</ContentWrapp>

<VideoBox>
  <iframe  src=""https://www.youtube.com/embed/Un7-hW6GAec"" title=""YouTube video player"" frameborder=""0"" allow=""accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>
</VideoBox>

Smart contracts result from the evolution of digital agreements. A smart contract is a self-executing contract with the terms of the agreement being directly written into computer code. Smart contracts provide the following benefits:

<ListItemsContainer>
  <div class=""wrapp"">
    <p class=""list__label""><b>Reliable, Guaranteed Execution</b></p>
    <ul class=""list__items"">
      <li class=""list__item"">
        <p>
   In traditional agreements, the execution and enforcement of the terms detailed within the contract is highly dependent on the signing parties; this may not happen immediately or at all. In terms of smart contracts, none of the parties have control over the execution or enforcement of contract terms.
   <b>Example:</b> In the insurance industry, the contract

:::NEXT DOC:::

#####Chapter 1:

What will this course cover?
=============================

***Chainlink, smart contracts, blockchains, and the entire world of cryptocurrency have been a hot topic of discussion for several years now.***

Whether it‚Äôs companies like EY and Microsoft looking to use smart contracts to improve their business processes, artists and athletes like LaMelo Ball creating their own‚ÄúNFTs‚Äù, or up and coming companies looking to disrupt long standing industries such as insurance, Chainlink and smart contracts are looking to be the backbone for world changing applications.

The future of the internet, dubbed Web3.0, is being built in front of our eyes so let's dive in and start building the future! But wait, Chainlink? Smart contracts? Doesn‚Äôt blockchain have something to do with that Bitcoin stuff some people buy? In this course we will build up the intuition on what Chianlink is and the problems it solves.

## What are Contracts?
Agreements, deals, promises; these are concepts that humans seem to universally have an intuition on across cultures. Maybe as a child you agreed to trade 3 of your toys for 1 friend‚Äôs rare toy.

![The San Juan Mountains are beautiful!](/image_md.png ""test image"")

Or maybe you‚Äôve agreed to lend your car to your friend as long as they don‚Äôt put more than 100 miles on it and bring it back with a full tank. Or maybe you make an agreement with your health coach that you wont eat more than 2,500 calories a day.

<BlueParagraph>
    These are all examples of agreements and agreements can be spoken orally, written down on paper, or even typed in digital documents. Enforcement of agreements are handled outside of courts: you will probably lose",right,
What are Service Level Agreements?`,https://www.chainlink.education/chainlinkIntroduction/chapter-3,"Digital agreements have been the most common format of agreements in the past decade. From bank agreements to social media, to Netflix, and crypto exchanges, companies who provide services on the internet typically use digital agreements to detail the exact conditions of the service to be provided. These are called SLAs or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.","Service Level Agreements (SLAs) are agreements that customers must agree to when buying a service on an online platform. They detail the exact conditions of the service to be provided and are typically overly complex and challenging to understand. They primarily benefit the platform owner, not the users.","or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.

Customers also tend not to read these agreements due to lengthy, complex legalese. Oftentimes digital agreements give consumers very little recourse at all! Due to these reasons, the power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers. A prime example of this is the <a style=""color:blue"" href=""https://www.jama.work/blog/on-robinhood-and-availability""> Robinhood Gamestop downtime incident</a>.

<MissionContainer>
  <div className=""title"">What are the SLAs you have agreed to?</div>
    <div className=""description"">
    Think about any digital services you subscribe to, for example video streaming or banking services. Do you know the terms of the SLAs between you and the service provider? If not, take the time and read over one of them.
    </div>
</MissionContainer>


:::NEXT DOC:::

When you buy an artwork on an online platform, you must agree to the Service Level Agreements. They are usually overly complex and can be challenging to understand. They primarily benefit the platform owner, not the users.


:::NEXT DOC:::

#####Chapter 3:

# Digital Agreements - What we have Today

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
    When you buy an artwork on an online platform, you must agree to the Service Level Agreements. They are usually overly complex and can be challenging to understand. They primarily benefit the platform owner, not the users.
    </div>
  </div>
</ContentWrapp>

Digital agreements have been the most common format of agreements in the past decade. From bank agreements to social media, to Netflix, and crypto exchanges, companies who provide services on the internet typically use digital agreements to detail the exact conditions of the service to be provided. These are called SLAs or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.

Customers also tend not to read these agreements due to lengthy, complex legalese. Oftentimes digital agreements give consumers very little recourse at all! Due to these reasons, the power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers. A prime example of this is the <a style=""color:blue""

:::NEXT DOC:::

concepts that humans seem to universally have an intuition on across cultures. Maybe as a child you agreed to trade 3 of your toys for 1 friend‚Äôs rare toy.

![The San Juan Mountains are beautiful!](/image_md.png ""test image"")

Or maybe you‚Äôve agreed to lend your car to your friend as long as they don‚Äôt put more than 100 miles on it and bring it back with a full tank. Or maybe you make an agreement with your health coach that you wont eat more than 2,500 calories a day.

<BlueParagraph>
    These are all examples of agreements and agreements can be spoken orally, written down on paper, or even typed in digital documents. Enforcement of agreements are handled outside of courts: you will probably lose trust in your friend who brings back your car with 600 miles on it and an almost empty tank of gas.
</BlueParagraph>

Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Thus enforcement of standard agreements is often kind of ‚Äúwishy washy‚Äù and based on many hard measure factors such as reputation impact.

Contracts are agreements that are enforceable in a court of law. Maybe you‚Äôve signed a leasing contract to rent an apartment or house. Perhaps you‚Äôve run a restaurant and signed a futures contract with food suppliers to get corn at a specific price and time no matter what happens in the corn market.

Or perhaps you‚Äôve signed an employment agreement with the company you work for on what your pay rate will be and what benefits you will have. Either way, once these contractual agreements have been made it is expected that if they are not executed how they were written they will be enforced by a court of law i.e. a government and

:::NEXT DOC:::

5,000 calories a day for the past week. Thus enforcement of standard agreements is often kind of ‚Äúwishy washy‚Äù and based on many hard measure factors such as reputation impact.

Contracts are agreements that are enforceable in a court of law. Maybe you‚Äôve signed a leasing contract to rent an apartment or house. Perhaps you‚Äôve run a restaurant and signed a futures contract with food suppliers to get corn at a specific price and time no matter what happens in the corn market.

Or perhaps you‚Äôve signed an employment agreement with the company you work for on what your pay rate will be and what benefits you will have. Either way, once these contractual agreements have been made it is expected that if they are not executed how they were written they will be enforced by a court of law i.e. a government and the power they have.


:::NEXT DOC:::

as a child. Perhaps you‚Äôve decided to lend your car to a friend as long as they don‚Äôt put more than 100 miles on it and return it with a full tank. You may have even agreed with your health coach not to eat more than 2,500 calories per day.

These are all examples of agreements. Agreements can be spoken orally, written down on paper, or even typed in digital documents. The enforcement of such agreements is oftentimes informal and ‚Äúwishy washy.‚Äù Disagreement is handled outside of courts or other formal institutions: a friend who brings back your car with 600 miles on it and an almost empty tank of gas loses your trust. Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Though factors such as reputation, magnitude, and parties within an agreement can affect its enforcement, there is no guarantee that an agreement will be fulfilled.

Contracts are agreements that are enforceable in a court of law. You may have signed a leasing contract to rent an apartment or house. Restaurateurs typically sign contracts with food suppliers to obtain necessary ingredients at a specific price and time no matter what happens in different food markets. You may sign an employment agreement with a company to establish your pay rate and employee benefits. In any form, once these contractual agreements have been made, they are enforced by a court of law. Any clause that is not fulfilled within a contract can be disputed and discussed within the court.

<MissionContainer>
  <div className=""title"">Arbitration Court</div>
    <div className=""description"">
    In fact, legal contracts have become so notoriously difficult to enforce more companies have been putting

:::NEXT DOC:::

#####Chapter 2:

# What are Contracts?

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     When you buy an artwork, you sign a contract between you and the artist or seller. This contract provides you with proof of ownership of the artwork. But it is possible to forge it and not follow the agreement. The seller could decide not to send the artwork to you though you already paid for it.
    </div>
  </div>
</ContentWrapp>

Agreements, deals, promises: these are concepts that humans universally have an intuition for across cultures. Maybe you agreed to trade three of your toys for one friend‚Äôs rare toy as a child. Perhaps you‚Äôve decided to lend your car to a friend as long as they don‚Äôt put more than 100 miles on it and return it with a full tank. You may have even agreed with your health coach not to eat more than 2,500 calories per day.

These are all examples of agreements. Agreements can be spoken orally, written down on paper, or even typed in digital documents. The enforcement of such agreements is oftentimes informal and ‚Äúwishy washy.‚Äù Disagreement is handled outside of courts or other formal institutions: a friend who brings back your car with 600 miles on it and an almost empty tank of gas loses your trust. Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Though factors such as

:::NEXT DOC:::

fulfilled.

Contracts are agreements that are enforceable in a court of law. You may have signed a leasing contract to rent an apartment or house. Restaurateurs typically sign contracts with food suppliers to obtain necessary ingredients at a specific price and time no matter what happens in different food markets. You may sign an employment agreement with a company to establish your pay rate and employee benefits. In any form, once these contractual agreements have been made, they are enforced by a court of law. Any clause that is not fulfilled within a contract can be disputed and discussed within the court.

<MissionContainer>
  <div className=""title"">Arbitration Court</div>
    <div className=""description"">
    In fact, legal contracts have become so notoriously difficult to enforce more companies have been putting ""arbitration"" clauses in their contracts. This means a private arbitration court is used to uphold the contract rather than a public judicial court. There has been a lot of controversy surrounding arbitration courts. You can read more about the history of arbitration courts in <a href=""https://www.americanbar.org/groups/tort_trial_insurance_practice/publications/the_brief/2018-19/summer/a-brief-history-arbitration/""> this article by the American Bar Association </a>.
    </div>
</MissionContainer>


:::NEXT DOC:::

#####Chapter 1:

What will this course cover?
=============================

***Chainlink, smart contracts, blockchains, and the entire world of cryptocurrency have been a hot topic of discussion for several years now.***

Whether it‚Äôs companies like EY and Microsoft looking to use smart contracts to improve their business processes, artists and athletes like LaMelo Ball creating their own‚ÄúNFTs‚Äù, or up and coming companies looking to disrupt long standing industries such as insurance, Chainlink and smart contracts are looking to be the backbone for world changing applications.

The future of the internet, dubbed Web3.0, is being built in front of our eyes so let's dive in and start building the future! But wait, Chainlink? Smart contracts? Doesn‚Äôt blockchain have something to do with that Bitcoin stuff some people buy? In this course we will build up the intuition on what Chianlink is and the problems it solves.

## What are Contracts?
Agreements, deals, promises; these are concepts that humans seem to universally have an intuition on across cultures. Maybe as a child you agreed to trade 3 of your toys for 1 friend‚Äôs rare toy.

![The San Juan Mountains are beautiful!](/image_md.png ""test image"")

Or maybe you‚Äôve agreed to lend your car to your friend as long as they don‚Äôt put more than 100 miles on it and bring it back with a full tank. Or maybe you make an agreement with your health coach that you wont eat more than 2,500 calories a day.

<BlueParagraph>
    These are all examples of agreements and agreements can be spoken orally, written down on paper, or even typed in digital documents. Enforcement of agreements are handled outside of courts: you will probably lose

:::NEXT DOC:::

#####Chapter 4:

# Smart Contracts - The Future

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Check out this video on what smart contracts are and how they are changing the nature of agreements and the Internet. 
    </div>
  </div>
</ContentWrapp>

<VideoBox>
  <iframe  src=""https://www.youtube.com/embed/Un7-hW6GAec"" title=""YouTube video player"" frameborder=""0"" allow=""accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>
</VideoBox>

Smart contracts result from the evolution of digital agreements. A smart contract is a self-executing contract with the terms of the agreement being directly written into computer code. Smart contracts provide the following benefits:

<ListItemsContainer>
  <div class=""wrapp"">
    <p class=""list__label""><b>Reliable, Guaranteed Execution</b></p>
    <ul class=""list__items"">
      <li class=""list__item"">
        <p>
   In traditional agreements, the execution and enforcement of the terms detailed within the contract is highly dependent on the signing parties; this may not happen immediately or at all. In terms of smart contracts, none of the parties have control over the execution or enforcement of contract terms.
   <b>Example:</b> In the insurance industry, the contract",right,
What makes a digital agreement different from a regular agreement or contractual agreement?,https://www.chainlink.education/chainlinkIntroduction/chapter-3,"Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.","A digital agreement is like a regular agreement but in a digital format and can be enforced in a court of law under certain circumstances. However, customers tend not to read these agreements due to lengthy, complex legalese, and digital agreements give consumers very little recourse at all, making the power of digital agreements heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers.","or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.

Customers also tend not to read these agreements due to lengthy, complex legalese. Oftentimes digital agreements give consumers very little recourse at all! Due to these reasons, the power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers. A prime example of this is the <a style=""color:blue"" href=""https://www.jama.work/blog/on-robinhood-and-availability""> Robinhood Gamestop downtime incident</a>.

<MissionContainer>
  <div className=""title"">What are the SLAs you have agreed to?</div>
    <div className=""description"">
    Think about any digital services you subscribe to, for example video streaming or banking services. Do you know the terms of the SLAs between you and the service provider? If not, take the time and read over one of them.
    </div>
</MissionContainer>


:::NEXT DOC:::

#####Chapter 3:

# Digital Agreements - What we have Today

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
    When you buy an artwork on an online platform, you must agree to the Service Level Agreements. They are usually overly complex and can be challenging to understand. They primarily benefit the platform owner, not the users.
    </div>
  </div>
</ContentWrapp>

Digital agreements have been the most common format of agreements in the past decade. From bank agreements to social media, to Netflix, and crypto exchanges, companies who provide services on the internet typically use digital agreements to detail the exact conditions of the service to be provided. These are called SLAs or Service Level Agreements.

What makes a digital agreement different from a regular agreement or contractual agreement? Well they‚Äôre like regular agreements‚Ä¶.but in a digital format. These agreements can be enforced in a court of law under certain circumstances. However, this doesn‚Äôt often happen due to the costs of going to court coupled with the low value these contracts represent for individual consumers.

Customers also tend not to read these agreements due to lengthy, complex legalese. Oftentimes digital agreements give consumers very little recourse at all! Due to these reasons, the power of digital agreements is heavily skewed towards the institutions who create them rather than being a fair, equitable agreement between institutions and their consumers. A prime example of this is the <a style=""color:blue""

:::NEXT DOC:::

concepts that humans seem to universally have an intuition on across cultures. Maybe as a child you agreed to trade 3 of your toys for 1 friend‚Äôs rare toy.

![The San Juan Mountains are beautiful!](/image_md.png ""test image"")

Or maybe you‚Äôve agreed to lend your car to your friend as long as they don‚Äôt put more than 100 miles on it and bring it back with a full tank. Or maybe you make an agreement with your health coach that you wont eat more than 2,500 calories a day.

<BlueParagraph>
    These are all examples of agreements and agreements can be spoken orally, written down on paper, or even typed in digital documents. Enforcement of agreements are handled outside of courts: you will probably lose trust in your friend who brings back your car with 600 miles on it and an almost empty tank of gas.
</BlueParagraph>

Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Thus enforcement of standard agreements is often kind of ‚Äúwishy washy‚Äù and based on many hard measure factors such as reputation impact.

Contracts are agreements that are enforceable in a court of law. Maybe you‚Äôve signed a leasing contract to rent an apartment or house. Perhaps you‚Äôve run a restaurant and signed a futures contract with food suppliers to get corn at a specific price and time no matter what happens in the corn market.

Or perhaps you‚Äôve signed an employment agreement with the company you work for on what your pay rate will be and what benefits you will have. Either way, once these contractual agreements have been made it is expected that if they are not executed how they were written they will be enforced by a court of law i.e. a government and

:::NEXT DOC:::

#####Chapter 2:

# What are Contracts?

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     When you buy an artwork, you sign a contract between you and the artist or seller. This contract provides you with proof of ownership of the artwork. But it is possible to forge it and not follow the agreement. The seller could decide not to send the artwork to you though you already paid for it.
    </div>
  </div>
</ContentWrapp>

Agreements, deals, promises: these are concepts that humans universally have an intuition for across cultures. Maybe you agreed to trade three of your toys for one friend‚Äôs rare toy as a child. Perhaps you‚Äôve decided to lend your car to a friend as long as they don‚Äôt put more than 100 miles on it and return it with a full tank. You may have even agreed with your health coach not to eat more than 2,500 calories per day.

These are all examples of agreements. Agreements can be spoken orally, written down on paper, or even typed in digital documents. The enforcement of such agreements is oftentimes informal and ‚Äúwishy washy.‚Äù Disagreement is handled outside of courts or other formal institutions: a friend who brings back your car with 600 miles on it and an almost empty tank of gas loses your trust. Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Though factors such as

:::NEXT DOC:::

as a child. Perhaps you‚Äôve decided to lend your car to a friend as long as they don‚Äôt put more than 100 miles on it and return it with a full tank. You may have even agreed with your health coach not to eat more than 2,500 calories per day.

These are all examples of agreements. Agreements can be spoken orally, written down on paper, or even typed in digital documents. The enforcement of such agreements is oftentimes informal and ‚Äúwishy washy.‚Äù Disagreement is handled outside of courts or other formal institutions: a friend who brings back your car with 600 miles on it and an almost empty tank of gas loses your trust. Your health coach will be very disappointed in you if you‚Äôve eaten 5,000 calories a day for the past week. Though factors such as reputation, magnitude, and parties within an agreement can affect its enforcement, there is no guarantee that an agreement will be fulfilled.

Contracts are agreements that are enforceable in a court of law. You may have signed a leasing contract to rent an apartment or house. Restaurateurs typically sign contracts with food suppliers to obtain necessary ingredients at a specific price and time no matter what happens in different food markets. You may sign an employment agreement with a company to establish your pay rate and employee benefits. In any form, once these contractual agreements have been made, they are enforced by a court of law. Any clause that is not fulfilled within a contract can be disputed and discussed within the court.

<MissionContainer>
  <div className=""title"">Arbitration Court</div>
    <div className=""description"">
    In fact, legal contracts have become so notoriously difficult to enforce more companies have been putting

:::NEXT DOC:::

5,000 calories a day for the past week. Thus enforcement of standard agreements is often kind of ‚Äúwishy washy‚Äù and based on many hard measure factors such as reputation impact.

Contracts are agreements that are enforceable in a court of law. Maybe you‚Äôve signed a leasing contract to rent an apartment or house. Perhaps you‚Äôve run a restaurant and signed a futures contract with food suppliers to get corn at a specific price and time no matter what happens in the corn market.

Or perhaps you‚Äôve signed an employment agreement with the company you work for on what your pay rate will be and what benefits you will have. Either way, once these contractual agreements have been made it is expected that if they are not executed how they were written they will be enforced by a court of law i.e. a government and the power they have.


:::NEXT DOC:::

Smart contracts result from the evolution of digital agreements. A Smart contract is a self-executing contract with the terms of the agreement being directly written into computer code.


:::NEXT DOC:::

#####Chapter 4:

# Smart Contracts - The Future

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Check out this video on what smart contracts are and how they are changing the nature of agreements and the Internet. 
    </div>
  </div>
</ContentWrapp>

<VideoBox>
  <iframe  src=""https://www.youtube.com/embed/Un7-hW6GAec"" title=""YouTube video player"" frameborder=""0"" allow=""accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture"" allowfullscreen></iframe>
</VideoBox>

Smart contracts result from the evolution of digital agreements. A smart contract is a self-executing contract with the terms of the agreement being directly written into computer code. Smart contracts provide the following benefits:

<ListItemsContainer>
  <div class=""wrapp"">
    <p class=""list__label""><b>Reliable, Guaranteed Execution</b></p>
    <ul class=""list__items"">
      <li class=""list__item"">
        <p>
   In traditional agreements, the execution and enforcement of the terms detailed within the contract is highly dependent on the signing parties; this may not happen immediately or at all. In terms of smart contracts, none of the parties have control over the execution or enforcement of contract terms.
   <b>Example:</b> In the insurance industry, the contract

:::NEXT DOC:::

before a contract is executed.
        </p>
      </li>
    </ul>
  </div>
    <div class=""wrapp"">
    <p class=""list__label""><b>Transparency</b></p>
    <ul class=""list__items"">
      <li class=""list__item"">
        <p>
          Traditional agreements can be opaque and difficult to access in an attempt to obscure details from users. Smart contracts are transparent and open to the public by default.
          <b>Example</b>: If the opaque Collaterlize Debt Obligations (CDOs) that played a large role in the 2008 financial crisis were programmed as smart contracts, they would be completely transparent and any member of the public would have had the ability to audit them.
        </p>
      </li>
    </ul>
  </div>
  <div class=""wrapp"">
    <p class=""list__label""><b>Tamper-Proofness</b></p>
    <ul class=""list__items"">
      <li class=""list__item"">
        <p>
        Smart contracts reduce counterparty risk since neither party has control over the execution of an agreement.  
        <b>Example:</b> An equities exchange platform would not be able to stop someone from using their platform unless explicitly coded into the smart contract.
        </p>
      </li>
    </ul>


:::NEXT DOC:::

is a self-executing contract with the terms of the agreement being directly written into computer code. Smart contracts provide the following benefits:

<ListItemsContainer>
  <div class=""wrapp"">
    <p class=""list__label""><b>Reliable, Guaranteed Execution</b></p>
    <ul class=""list__items"">
      <li class=""list__item"">
        <p>
   In traditional agreements, the execution and enforcement of the terms detailed within the contract is highly dependent on the signing parties; this may not happen immediately or at all. In terms of smart contracts, none of the parties have control over the execution or enforcement of contract terms.
   <b>Example:</b> In the insurance industry, the contract isn‚Äôt immediately executed after the conditions have been met. Rather, a lengthy review process is initiated and it could take months, even years before a contract is executed.
        </p>
      </li>
    </ul>
  </div>
    <div class=""wrapp"">
    <p class=""list__label""><b>Transparency</b></p>
    <ul class=""list__items"">
      <li class=""list__item"">
        <p>
          Traditional agreements can be opaque and difficult to access in an attempt to obscure details from users. Smart contracts are transparent and open to the public by default.
          <b>Example</b>: If the opaque Collaterlize Debt Obligations (CDOs) that played a large role in the 2008 financial",right,
What is wrong with using centralized oracles?,https://www.chainlink.education/chainlinkIntroduction/chapter-5,"To create functional smart contracts we need a middleware system called an Oracle, but how will we make this Oracle? Well, we are trying to get price data into our smart contract for NFTs. My friend Jim (trust me, he is good!) is an expert in cryptocurrency prices, and he even has a server set up that we can access for price data. Awesome, we'll make Jim our oracle and he will provide price data to our NFT smart contract.

But wait‚Ä¶.didn‚Äôt all the great properties of smart contracts and blockchains come from their decentralized nature? What if Jim wanted to maliciously send our smart contract bad price data so he could manipulate it in his favor? What if his server goes offline when the NFT needs to update and thus can‚Äôt? What if Jim isn‚Äôt even malicious but gets hacked by a malicious actor? This single oracle solution isn‚Äôt solving much of the oracle problem because it isn‚Äôt decentralized, and thus provides a weak link that ruins all of those awesome smart contract properties. You need to trust that Jim, and my word on Jim, that he is a great person and will act in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?","Using centralized oracles provides a weak link that ruins the decentralized nature of smart contracts and blockchains, as it requires trust in a single entity or source of data. This can lead to potential issues such as malicious manipulation of data or server downtime.","outside systems.

<Spacer>

## Centralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     So an Oracle is the type of system you want to make a dNFT but it is important that the entire NFT remains decentralized so your art work can truly live on forever. You'll also want the NFT to be have the most accurate up-to-date data.
    </div>
  </div>
</ContentWrapp>

To create functional smart contracts we need a middleware system called an <ColorWord>Oracle</ColorWord>, but how will we make this Oracle? Well, we are trying to get price data into our smart contract for NFTs. My friend Jim (trust me, he is good!) is an expert in cryptocurrency prices, and he even has a server set up that we can access for price data. Awesome, we'll make Jim our oracle and he will provide price data to our NFT smart contract.

But wait‚Ä¶.didn‚Äôt all the great properties of smart contracts and blockchains come from their decentralized nature? What if Jim wanted to maliciously send our smart contract bad price data so he could manipulate it in his favor? What if his server goes offline when the NFT needs to update and thus can‚Äôt? What if Jim isn‚Äôt even malicious but gets hacked by a malicious actor? This single oracle solution isn‚Äôt solving much of the oracle problem because it isn‚Äôt <i>decentralized</i>, and thus provides

:::NEXT DOC:::

to outside resources. This is due to the distributed and deterministic nature of blockchains. All of the distributed nodes (nodes are computers running the blockchain software) in the blockchain must come to a consensus on what the blockchain is and any changes to it. If the blockchain just connected to a data source, the nodes could query the data at different times and get other answers, breaking the ability for the nodes to reach consensus. Even worse, if that data source changed locations or is down, the whole blockchain would break.

This means developers can program smart contracts as long as their logic doesn‚Äôt require any outside data. This may sound highly limiting, but there is a system in place that sits in between blockchains and the outside world (a concept aptly called ‚Äúmiddleware‚Äù). This middleware system is called an Oracle. The name <ColorWord>Oracle</ColorWord> comes from the Greek concept of an Oracle since it needs to determine what is <i>true</i> in outside systems.

<Spacer>

## Centralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     So an Oracle is the type of system you want to make a dNFT but it is important that the entire NFT remains decentralized so your art work can truly live on forever. You'll also want the NFT to be have the most accurate up-to-date data.
    </div>
  </div>
</ContentWrapp>

To create functional smart contracts we need a middleware system called an

:::NEXT DOC:::

friend Jim (trust me, he is good!) is an expert in cryptocurrency prices, and he even has a server set up that we can access for price data. Awesome, we'll make Jim our oracle and he will provide price data to our NFT smart contract.

But wait‚Ä¶.didn‚Äôt all the great properties of smart contracts and blockchains come from their decentralized nature? What if Jim wanted to maliciously send our smart contract bad price data so he could manipulate it in his favor? What if his server goes offline when the NFT needs to update and thus can‚Äôt? What if Jim isn‚Äôt even malicious but gets hacked by a malicious actor? This single oracle solution isn‚Äôt solving much of the oracle problem because it isn‚Äôt <i>decentralized</i>, and thus provides a weak link that ruins all of those awesome smart contract properties. You need to trust that Jim, and my word on Jim, that he is a great person and will act in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?

Finally we are here‚Ä¶...enter Chainlink!

<Spacer>

## Chainlink and Decentralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Using a Chainlink Decentralized Oracle Network (DON) as the Oracle for your dNFT can give you strong guarantees that your artwork will truly update with the latest,

:::NEXT DOC:::

Question: (Asked on: 2021-11-26 22:39:12)
Why does calling an external API in chainlink not cause inconsistency?
URL: https://stackoverflow.com/questions/70130661/why-does-calling-an-external-api-in-chainlink-not-cause-inconsistency

Question Body:


Suppose I have a smart contract that uses Chainlink's ""Call Any External API""
capability to get some data from an external URL. My understanding is that
each Ethereum full node runs each smart contract to verify the status; it does
so to verify the latest block. But what if, between the time one full node
runs the contract and another one does, the data returned by calling tha
external API changes. Then it would seem that different full nodes would get
different results for that smart contract, resulting in inconsistent states.
Why does that not happen?



Answers:
(Answered on: 2021-12-10 18:05:16)


Because oracle responses are stored on-chain.

You are right, if fetching external data was part of the validation process,
no nodes would be able to reach a consensus. So instead, a Chainlink oracle
network places the data on-chain in a transaction, and then it goes through
the same validation process as every other transaction.

You can read more about how Chainlink's [Basic Request
Model](https://docs.chain.link/docs/architecture-request-model/) looks, but
this is basically the reason why having an oracle system built into a
blockchain is impossible.





:::NEXT DOC:::

Smart contracts have special properties and need decentralized oracles to carry out functions. This is where Chainlink comes in. Chainlink is a platform for creating decentralized oracle networks that provide various smart contract services. So using Chainlink, we can create a price oracle that isn‚Äôt just Jim but Jim and 30 other of the most trusted and expert crypto price data aggregators out there and make them come to an agreement.


:::NEXT DOC:::

in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?

Finally we are here‚Ä¶...enter Chainlink!

<Spacer>

## Chainlink and Decentralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Using a Chainlink Decentralized Oracle Network (DON) as the Oracle for your dNFT can give you strong guarantees that your artwork will truly update with the latest, most acurate data and remain decentralized. 
    </div>
  </div>
</ContentWrapp>

Smart contracts have special properties and need decentralized oracles to carry out functions. This is where Chainlink comes in. <ColorWord>Chainlink is a platform for creating decentralized oracle networks that provide various smart contract services</ColorWord>. So using Chainlink, we can create a price oracle that isn‚Äôt just Jim but Jim and 30 other of the most trusted and expert crypto price data aggregators out there and make them come to an agreement.

Chainlink allows developers to create and customize any type of <ColorWord>Decentralized Oracle Network</ColorWord>, or DONs, a smart contract might need. Developers can choose which nodes are a part of a network, what type of data each node is looking for, how nodes come to an agreement, when nodes should post updates, and any other computation nodes should perform.

:::NEXT DOC:::

the smart contract consumer.

If I'm not misunderstanding this basics concepts, I have some doubts:

  * The first two models, DDM and OCR, are only for assets' prices or they could be used for other kinds of data since exists oracles providing that data? If true, are there real examples of this kind of usage?
  * About the Basic Request Model, I feel like it is a centralized solution, I haven't seen any step of aggregation/conciliation, only one node responds and that is it. Is this understanding right or I'm missing something?
  * Another concept not clear yet: what is a Data Provider? I found out this page <https://market.link/search/data-providers> and seems like centralized providers of data, is that right?



Answers:
(Answered on: 2022-05-23 04:12:59)


Some great questions and points asked here. I'll try to address them one by
one:

> The first two models, DDM and OCR, are only for assets' prices or they could
> be used for other kinds of data since exists oracles providing that data? If
> true, are there real examples of this kind of usage?

Correct, right now they are mainly used for asset prices because that's where
the biggest current need is. But the idea is in the future that they will be
used for many other types of data, such as weather data, sports and election
results etc. In terms of real world examples, right now only price data feeds
are officially supported, but there's nothing stopping someone taking the code
and attempting to spin up their own OCR networks for other types of data

> About the Basic Request Model, I feel like it is a centralized solution, I
> haven't seen any step of aggregation/conciliation, only one node responds
> and that is it. Is this understanding right or I'm missing something?

This is correct. The direct API request really opens up smart contract

:::NEXT DOC:::

Is there no other way?

You might argue that you can use the content of a block as a source of randomness. But these values can be actively manipulated by miners. They could add or remove transactions to find a result that benefits them. In addition, blocks also have particular properties that could reduce the search space to calculate probabilities that a specific number will be selected. So this is an insecure way of creating random numbers.

So if you cannot trust the miners, you could argue for using Oracles. A trusted third-party system could be used to create random numbers and then provide them to services via an oracle. But depending on the economic incentive, someone could be interested in hacking this system to provide non-random numbers as input. And while they might use a true random number generator, you don‚Äôt know for sure and do not have any way to check the validity of such a statement once the number was generated.

So we must address two further issues here. The single point of failure (single oracle) and validating that the number was generated with a particular function. For the first issue, you could argue that you could use decentralized oracle network (DON). So it wouldn‚Äôt be a single oracle that we need to trust.
But how do we know this DON is not generating numbers based on certain conditions? For this reason, Verifiable Random Functions are used. They allow everyone to verify that a specific VRF was used and that the number was produced by a particular VRF and no other function. This allows us to generate verifiable random numbers for on-chain usage in a decentralized way.


:::NEXT DOC:::

Question: (Asked on: 2022-01-18 13:13:16)
Can you develop an independent, secure oracle for your dApp?
URL: https://stackoverflow.com/questions/70756168/can-you-develop-an-independent-secure-oracle-for-your-dapp

Question Body:


I need random number generation for the dApp I am developing and would love to
Not have to pay for a service like Chainlink or Provable. Not that I don't
support their work, but bootstrapping is bootstrapping and the funds are
limited.

I'm assuming that developing an independent oracle is possible, but probably
discouraged because security is a whole industry, but I am wondering if anyone
has attempted Or if any experts here believe it is possible to do this and
feel good about the decision.

Looking forward to a lively debate! Maybe this is a simple question to answer
and I am missing something...



Answers:
(Answered on: 2022-01-18 20:58:48)


Random numbers and blockchains don't go together very well due to the fact a
blockchain is deterministic. This means you should not rely on any on-chain
values for a source of randomness (like block hashes or timestamps etc), as
they can be manipulated or pre-determined by miners and used to game your
contract that relies on randomness.

In addition to this, just using an oracle to get a source of randomness from
an external API is also strongly discouraged, because there's no real way of
knowing if the returned number is _actually_ random, of it's been sent back by
a malicious actor wanting to game your contract that relies on it. Ie if your
oracle returned **123456789** , how do you know if its a truly random number,
or if its returning that because it knows it can then call your contract and
take

:::NEXT DOC:::

Question: (Asked on: 2022-02-23 06:40:57)
How chainlink can be used for verifying Biometric data
URL: https://stackoverflow.com/questions/71232356/how-chainlink-can-be-used-for-verifying-biometric-data

Question Body:


Chainlink oracles are solving the real world problems in a big way. I am
working on a project, which solves the user biometric identity privacy. So my
question is that we trust chainlink oracles because it fetches data from
multiple sources and verify them in blockchain. What if the data is available
at single source like the repository of users biometric data.

  * How biometric data can be verified with chainlink?
  * How chainlink can make sure the the database is reliable?
  * How chainlink cross reference the database?
  * What exactly is the cross reference the database?



Answers:
(Answered on: 2022-02-23 20:03:55)


These are great questions. It seems their root comes from having data
available from a single source. That would be a limiting factor compared to
something with multiple data sources.

If the data can be cryptographically signed at the source, it should be
'verifiable' from a tamper resistance standpoint.

I'm not sure I understand the last two points there, though. Perhaps looking
at AnyAPI might help answer these?

<https://blog.chain.link/apis-smart-contracts-and-how-to-connect-them/>
<https://docs.chain.link/docs/request-and-receive-data/>



",right,
When do decentralized oracle networks (DONs) Provide Data,https://www.chainlink.education/chainlinkIntroduction/chapter-5,"Chainlink allows developers to create and customize any type of Decentralized Oracle Network, or DONs, a smart contract might need. Developers can choose which nodes are a part of a network, what type of data each node is looking for, how nodes come to an agreement, when nodes should post updates, and any other computation nodes should perform. Finally, with Chainlink, developers can build smart contracts that can interact with the outside world to preserve the decentralized nature of smart contracts.","Decentralized oracle networks (DONs) provide data based on a specified heartbeat and deviation threshold, which determines how often and under what conditions the data is updated and posted on-chain.","in the data before it is posted on-chain, regardless of how much time has elasped. For example, if the ETH/USD deviation threshold is set to 1%, then the DON will update the data feed if it senses the price of ETH versus USD fluctuates more than 1%.

<br>
<b>How DONs Provide Data</b>

Ideally, nodes should retrieve data from multiple sources and <i>aggregate</i>, or combine, the data to return the most accurate price they can. Developers can use external adapters to customize the sources that nodes use to aggregate data. <ColorWord>External adapters</ColorWord> are custom built software packages that can be added to the nodes. These can be built in any programming language and perform any operations developers may find useful. These operations can be as simple as basic arithmetic but can span to being complex machine learning algorithms.

<br>
<b>How Consensus is Reached Among Nodes</b>

All of the different nodes in the DON have their own version of the price. Using this information, developers customize the aggregation method of Chainlink DONs to determine one value for the true price. This is another level of aggregation beyond the aggregation completed at the individual node level. Having multiple levels of aggregation ensures the highest level of data quality. This <i>aggregation method</i> can consist of any type of operation including median, mean, weighted mean, mode, or other calculations. In our dynamic NFT will make use of a data feed that takes the median of all the node‚Äôs price data, since the median is more resistant to outliers than the mean.


:::NEXT DOC:::

Finance (DeFi), a popular use case of Chainlink DONs is relating them with price data. However, any type of data that is available in a digital format can be accessed. This includes but is not limited to weather data, YouTube views, sensor data, or even data from other blockchains. For the NFT we‚Äôre just going to stick to price data for now, specifically the ETH/USD price, but you can imagine all the possibilities of cool smart contracts we can make with all of the digital data available today!

<br>
<b>When DONS Provide Data</b>

Some applications require a DON that updates the data once a day. Others need updates once every five minutes or only when the data itself changes by a certain amount. The term <ColorWord>heartbeat</ColorWord> is used to describe the max amount of time that can elapse before a DON updates it's data feed The term <ColorWord>deviation threshold</ColorWord> is used to describe how much variation is allowed in the data before it is posted on-chain, regardless of how much time has elasped. For example, if the ETH/USD deviation threshold is set to 1%, then the DON will update the data feed if it senses the price of ETH versus USD fluctuates more than 1%.

<br>
<b>How DONs Provide Data</b>

Ideally, nodes should retrieve data from multiple sources and <i>aggregate</i>, or combine, the data to return the most accurate price they can. Developers can use external adapters to customize the sources that nodes use to aggregate data. <ColorWord>External adapters</ColorWord> are custom built software packages that can be added to the nodes. These can be built in any programming language and perform any operations developers may find useful. These operations can be as simple as

:::NEXT DOC:::

smart contracts? Chainlink is open source so there‚Äôs always the option of making your own DON, but creating a DON is a complex and nuanced process. Instead, in the spirit of the old developer adage ‚ÄúNever build something twice‚Äù, use existing DONs if possible.

Luckily, many of the largest and highest quality node operators in the blockchain industry have already combined their knowledge and prowess to create DONs that serve the most in-demand data for smart contract developers to take advantage of. These data serving DONs are called <ColorWord>Chainlink Data Feeds</ColorWord>. Currently most of the data feeds provide data on various currency and cryptocurrency pairs, as that was initially what smart contract developers needed, but data feeds can be used to retrieve any type of data.

You can see these data feeds updating in real time at data.chain.link. There you can select different blockchains Chainlink DONs are posting data to, as well view the details of each DON that compose a particular data feed. For instance if you click on the ETH/USD data feed you will see all the nodes involved in the DON, what price each individual node posted, and the final aggregated price of the asset. Some important terms you may notice are:

<p><ColorWord>Rounds</ColorWord>DONs update data feeds in rounds. When a new round is initiated the nodes in a DON retrieve the latest data point from data providers, aggregate the data at the individual node level and finally aggregate the between the nodes. Once the final aggregated data point, along with each individual nodes observation, is posted on-chain the round is considered complete.</p>
<p><ColorWord>Heartbeat</ColorWord>The maximum amount of time that is allowed to pass before the DON automatically starts a new round and updates the

:::NEXT DOC:::

can customize several main areas of Chainlink DONs. These include:</p>
  <ul>
    <li>
      <p>Specifying what data DONs need to provide</p>
    </li>
    <li>
      <p>How DONs retrieve data </p>
    </li>
    <li>
      <p>When DONs provide data</p>
    </li>
    <li>
      <p>How agreement (also known as consensus) is achieved among the nodes to achieve a single source of truth for the specified data.</p>
    </li>
  </ul>
</div>

###Each step is outlined in more detail below:

<br><br>
<b>Specifying what data DONs need to provide</b>

Due to the proliferation of Decentralized Finance (DeFi), a popular use case of Chainlink DONs is relating them with price data. However, any type of data that is available in a digital format can be accessed. This includes but is not limited to weather data, YouTube views, sensor data, or even data from other blockchains. For the NFT we‚Äôre just going to stick to price data for now, specifically the ETH/USD price, but you can imagine all the possibilities of cool smart contracts we can make with all of the digital data available today!

<br>
<b>When DONS Provide Data</b>

Some applications require a DON that updates the data once a day. Others need updates once every five minutes or only when the data itself changes by a certain amount. The term <ColorWord>heartbeat</ColorWord> is used to describe the max amount of

:::NEXT DOC:::

in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?

Finally we are here‚Ä¶...enter Chainlink!

<Spacer>

## Chainlink and Decentralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Using a Chainlink Decentralized Oracle Network (DON) as the Oracle for your dNFT can give you strong guarantees that your artwork will truly update with the latest, most acurate data and remain decentralized. 
    </div>
  </div>
</ContentWrapp>

Smart contracts have special properties and need decentralized oracles to carry out functions. This is where Chainlink comes in. <ColorWord>Chainlink is a platform for creating decentralized oracle networks that provide various smart contract services</ColorWord>. So using Chainlink, we can create a price oracle that isn‚Äôt just Jim but Jim and 30 other of the most trusted and expert crypto price data aggregators out there and make them come to an agreement.

Chainlink allows developers to create and customize any type of <ColorWord>Decentralized Oracle Network</ColorWord>, or DONs, a smart contract might need. Developers can choose which nodes are a part of a network, what type of data each node is looking for, how nodes come to an agreement, when nodes should post updates, and any other computation nodes should perform.

:::NEXT DOC:::

friend Jim (trust me, he is good!) is an expert in cryptocurrency prices, and he even has a server set up that we can access for price data. Awesome, we'll make Jim our oracle and he will provide price data to our NFT smart contract.

But wait‚Ä¶.didn‚Äôt all the great properties of smart contracts and blockchains come from their decentralized nature? What if Jim wanted to maliciously send our smart contract bad price data so he could manipulate it in his favor? What if his server goes offline when the NFT needs to update and thus can‚Äôt? What if Jim isn‚Äôt even malicious but gets hacked by a malicious actor? This single oracle solution isn‚Äôt solving much of the oracle problem because it isn‚Äôt <i>decentralized</i>, and thus provides a weak link that ruins all of those awesome smart contract properties. You need to trust that Jim, and my word on Jim, that he is a great person and will act in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?

Finally we are here‚Ä¶...enter Chainlink!

<Spacer>

## Chainlink and Decentralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Using a Chainlink Decentralized Oracle Network (DON) as the Oracle for your dNFT can give you strong guarantees that your artwork will truly update with the latest,

:::NEXT DOC:::

run the computation off-chain. Finally, oracle nodes use the [Chainlink
OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the
responses before passing the aggregated responses to the consumer contracts in
callbacks. Note: As long as you use vanilla Node.js (no modules imports), you
can decentralize any computation you want such as API calls, computing maths
operations, etc.

## Decentralized Oracle Network (DON)

_Chainlink Functions_ are powered by a [Decentralized Oracle
Network](https://chain.link/education/blockchain-oracles#decentralized-oracles). The oracle nodes are independent of each other and are responsible
for running the same function such as API calls, computing maths operations,
etc. The nodes use the [Chainlink OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the nodes' responses. Finally, a DON's
oracle sends the aggregate response to the consumer contract in a callback.

## Subscriptions

  * Subscriptions App: A user interface that interacts with the _Subscriptions Contract_. **Note** : The _Subscriptions App_ is not available now, we recommend using the [functions hardhat starter kit](https://github.com/smartcontractkit/functions-hardhat-starter-kit) to interact with the _Subscriptions Contract_.
  * Subscriptions Contract (aka [Functions Billing Registry Contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/dev/functions/FunctionsBillingRegistry.sol)): The contract that holds user funds to pay for _Chainlink Functions_ requests.
  * subscription account: An account that holds LINK tokens and makes them available to fund requests to Chainlink DON. A _Subscription ID_ uniquely IDentifies each account.
  * Subscription ID: 64-bit unsigned integer

:::NEXT DOC:::

# Chainlink Functions Concepts

  * Overview
  * Request and Receive Data
  * Decentralized Oracle Network (DON)
  * Subscriptions

_Chainlink Functions_ do not require your consumer contracts to hold LINK
tokens and send them to oracles when making requests. Instead, you must create
a subscription account and fund it to pre-pay for your _Chainlink Functions_
requests, so your consumer contracts don't need to hold LINK when calling
_Chainlink Functions_.

Before you explore how Chainlink Functions works in the
[Architecture](/chainlink-functions/resources/architecture) guide, it is best
to understand the core concepts in this guide.

## Request and Receive Data

This model is similar to the [Basic Request Model](/architecture-overview/architecture-request-model): Consumer contracts initiate the cycle by
creating requests to Functions Oracle contracts. Oracle nodes watch for events
emitted by the [Functions Oracle
contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/dev/functions/FunctionsOracle.sol)
and run the computation off-chain. Finally, oracle nodes use the [Chainlink
OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the
responses before passing the aggregated responses to the consumer contracts in
callbacks. Note: As long as you use vanilla Node.js (no modules imports), you
can decentralize any computation you want such as API calls, computing maths
operations, etc.

## Decentralized Oracle Network (DON)

_Chainlink Functions_ are powered by a [Decentralized Oracle
Network](https://chain.link/education/blockchain-oracles#decentralized-oracles). The oracle nodes are independent of each other and are responsible
for running the same function such as API calls, computing maths

:::NEXT DOC:::

#####Chapter 6:

# Chainlink Data Feeds

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Now that you understood how to connect the off-chain world you can utilize this knowledge now for your NFT. Imagine a NFT that reacts to the price of Ethereum. It could rain when the price falls and it could be sunny when the price rises.
    </div>
  </div>
</ContentWrapp>

As discussed in the previous lesson, Chainlink gives developers the ability to create extremely powerful DON‚Äôs that provide smart contracts with the highest quality data from outside the blockchain. As a smart contract developer, how can you take advantage of these DONs in your own smart contracts? Chainlink is open source so there‚Äôs always the option of making your own DON, but creating a DON is a complex and nuanced process. Instead, in the spirit of the old developer adage ‚ÄúNever build something twice‚Äù, use existing DONs if possible.

Luckily, many of the largest and highest quality node operators in the blockchain industry have already combined their knowledge and prowess to create DONs that serve the most in-demand data for smart contract developers to take advantage of. These data serving DONs are called <ColorWord>Chainlink Data Feeds</ColorWord>. Currently most of the data feeds provide data on various currency and cryptocurrency pairs, as that was initially what smart contract developers needed, but data feeds can be used to retrieve any type of data.

You can see these data feeds updating

:::NEXT DOC:::

a data feed, the quality of the data feed improves. For this
reason, each data feed has its own properties depending on the needs of its
community of users.

## Decentralized Oracle Network

Each data feed is updated by a decentralized oracle network. Each oracle
operator is rewarded for publishing data. The number of oracles contributing
to each feed varies. In order for an update to take place, the data feed
aggregator contract must receive responses from a minimum number of oracles or
the latest answer will not be updated. You can see the minimum number of
oracles for the corresponding feed at
[data.chain.link](https://data.chain.link).

Each oracle in the set publishes data during an aggregation round. That data
is validated and aggregated by a smart contract, which forms the feed's latest
and trusted answer.

## Components of a Decentralized Oracle Network

Data Feeds are an example of a decentralized oracle network, and include the
following components:

  * A consumer contract
  * A proxy contract
  * An aggregator contract

To learn how to create a consumer contract that uses an existing data feed,
read the [Using Data Feeds](/data-feeds/price-feeds) documentation.

### Consumer

A Consumer contract is any contract that uses Chainlink Data Feeds to consume
aggregated data. Consumer contracts must reference the correct
[`AggregatorV3Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol)
contract and call one of the exposed functions.


    ...
    AggregatorV3Interface feed = AggregatorV3Interface(address);
    return feed.latestRoundData();

Off-chain applications can also consume data feeds. See the Javascript and
Python example code on the [Using Data",right,
How  do decentralized oracle networks (DONs) Provide Data,https://www.chainlink.education/chainlinkIntroduction/chapter-5,"Chainlink allows developers to build and customize DONs. Chainlink allows DONs to work and assures that node operators are incentivized not to collude or act maliciously.

How does Chainlink Work?

Developers can customize several main areas of Chainlink DONs. These include:

Specifying what data DONs need to provide

How DONs retrieve data 

When DONs provide data

How agreement (also known as consensus) is achieved among the nodes to achieve a single source of truth for the specified data.","Decentralized oracle networks (DONs) provide data by specifying what data is needed, when it should be provided, how it should be retrieved, and how consensus is reached among the nodes to achieve a single source of truth for the specified data. Nodes retrieve data from multiple sources and aggregate the data to return the most accurate price they can. Developers can use external adapters to customize the sources that nodes use to aggregate data. All of the different nodes in the DON have their own version of the price, and using this information, developers customize the aggregation method of Chainlink DONs to determine one value for the true price. This is another level of aggregation beyond the aggregation completed at the individual node level. Having multiple levels of aggregation ensures the highest level of data quality.","in the data before it is posted on-chain, regardless of how much time has elasped. For example, if the ETH/USD deviation threshold is set to 1%, then the DON will update the data feed if it senses the price of ETH versus USD fluctuates more than 1%.

<br>
<b>How DONs Provide Data</b>

Ideally, nodes should retrieve data from multiple sources and <i>aggregate</i>, or combine, the data to return the most accurate price they can. Developers can use external adapters to customize the sources that nodes use to aggregate data. <ColorWord>External adapters</ColorWord> are custom built software packages that can be added to the nodes. These can be built in any programming language and perform any operations developers may find useful. These operations can be as simple as basic arithmetic but can span to being complex machine learning algorithms.

<br>
<b>How Consensus is Reached Among Nodes</b>

All of the different nodes in the DON have their own version of the price. Using this information, developers customize the aggregation method of Chainlink DONs to determine one value for the true price. This is another level of aggregation beyond the aggregation completed at the individual node level. Having multiple levels of aggregation ensures the highest level of data quality. This <i>aggregation method</i> can consist of any type of operation including median, mean, weighted mean, mode, or other calculations. In our dynamic NFT will make use of a data feed that takes the median of all the node‚Äôs price data, since the median is more resistant to outliers than the mean.


:::NEXT DOC:::

Finance (DeFi), a popular use case of Chainlink DONs is relating them with price data. However, any type of data that is available in a digital format can be accessed. This includes but is not limited to weather data, YouTube views, sensor data, or even data from other blockchains. For the NFT we‚Äôre just going to stick to price data for now, specifically the ETH/USD price, but you can imagine all the possibilities of cool smart contracts we can make with all of the digital data available today!

<br>
<b>When DONS Provide Data</b>

Some applications require a DON that updates the data once a day. Others need updates once every five minutes or only when the data itself changes by a certain amount. The term <ColorWord>heartbeat</ColorWord> is used to describe the max amount of time that can elapse before a DON updates it's data feed The term <ColorWord>deviation threshold</ColorWord> is used to describe how much variation is allowed in the data before it is posted on-chain, regardless of how much time has elasped. For example, if the ETH/USD deviation threshold is set to 1%, then the DON will update the data feed if it senses the price of ETH versus USD fluctuates more than 1%.

<br>
<b>How DONs Provide Data</b>

Ideally, nodes should retrieve data from multiple sources and <i>aggregate</i>, or combine, the data to return the most accurate price they can. Developers can use external adapters to customize the sources that nodes use to aggregate data. <ColorWord>External adapters</ColorWord> are custom built software packages that can be added to the nodes. These can be built in any programming language and perform any operations developers may find useful. These operations can be as simple as

:::NEXT DOC:::

smart contracts? Chainlink is open source so there‚Äôs always the option of making your own DON, but creating a DON is a complex and nuanced process. Instead, in the spirit of the old developer adage ‚ÄúNever build something twice‚Äù, use existing DONs if possible.

Luckily, many of the largest and highest quality node operators in the blockchain industry have already combined their knowledge and prowess to create DONs that serve the most in-demand data for smart contract developers to take advantage of. These data serving DONs are called <ColorWord>Chainlink Data Feeds</ColorWord>. Currently most of the data feeds provide data on various currency and cryptocurrency pairs, as that was initially what smart contract developers needed, but data feeds can be used to retrieve any type of data.

You can see these data feeds updating in real time at data.chain.link. There you can select different blockchains Chainlink DONs are posting data to, as well view the details of each DON that compose a particular data feed. For instance if you click on the ETH/USD data feed you will see all the nodes involved in the DON, what price each individual node posted, and the final aggregated price of the asset. Some important terms you may notice are:

<p><ColorWord>Rounds</ColorWord>DONs update data feeds in rounds. When a new round is initiated the nodes in a DON retrieve the latest data point from data providers, aggregate the data at the individual node level and finally aggregate the between the nodes. Once the final aggregated data point, along with each individual nodes observation, is posted on-chain the round is considered complete.</p>
<p><ColorWord>Heartbeat</ColorWord>The maximum amount of time that is allowed to pass before the DON automatically starts a new round and updates the

:::NEXT DOC:::

can customize several main areas of Chainlink DONs. These include:</p>
  <ul>
    <li>
      <p>Specifying what data DONs need to provide</p>
    </li>
    <li>
      <p>How DONs retrieve data </p>
    </li>
    <li>
      <p>When DONs provide data</p>
    </li>
    <li>
      <p>How agreement (also known as consensus) is achieved among the nodes to achieve a single source of truth for the specified data.</p>
    </li>
  </ul>
</div>

###Each step is outlined in more detail below:

<br><br>
<b>Specifying what data DONs need to provide</b>

Due to the proliferation of Decentralized Finance (DeFi), a popular use case of Chainlink DONs is relating them with price data. However, any type of data that is available in a digital format can be accessed. This includes but is not limited to weather data, YouTube views, sensor data, or even data from other blockchains. For the NFT we‚Äôre just going to stick to price data for now, specifically the ETH/USD price, but you can imagine all the possibilities of cool smart contracts we can make with all of the digital data available today!

<br>
<b>When DONS Provide Data</b>

Some applications require a DON that updates the data once a day. Others need updates once every five minutes or only when the data itself changes by a certain amount. The term <ColorWord>heartbeat</ColorWord> is used to describe the max amount of

:::NEXT DOC:::

in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?

Finally we are here‚Ä¶...enter Chainlink!

<Spacer>

## Chainlink and Decentralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Using a Chainlink Decentralized Oracle Network (DON) as the Oracle for your dNFT can give you strong guarantees that your artwork will truly update with the latest, most acurate data and remain decentralized. 
    </div>
  </div>
</ContentWrapp>

Smart contracts have special properties and need decentralized oracles to carry out functions. This is where Chainlink comes in. <ColorWord>Chainlink is a platform for creating decentralized oracle networks that provide various smart contract services</ColorWord>. So using Chainlink, we can create a price oracle that isn‚Äôt just Jim but Jim and 30 other of the most trusted and expert crypto price data aggregators out there and make them come to an agreement.

Chainlink allows developers to create and customize any type of <ColorWord>Decentralized Oracle Network</ColorWord>, or DONs, a smart contract might need. Developers can choose which nodes are a part of a network, what type of data each node is looking for, how nodes come to an agreement, when nodes should post updates, and any other computation nodes should perform.

:::NEXT DOC:::

run the computation off-chain. Finally, oracle nodes use the [Chainlink
OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the
responses before passing the aggregated responses to the consumer contracts in
callbacks. Note: As long as you use vanilla Node.js (no modules imports), you
can decentralize any computation you want such as API calls, computing maths
operations, etc.

## Decentralized Oracle Network (DON)

_Chainlink Functions_ are powered by a [Decentralized Oracle
Network](https://chain.link/education/blockchain-oracles#decentralized-oracles). The oracle nodes are independent of each other and are responsible
for running the same function such as API calls, computing maths operations,
etc. The nodes use the [Chainlink OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the nodes' responses. Finally, a DON's
oracle sends the aggregate response to the consumer contract in a callback.

## Subscriptions

  * Subscriptions App: A user interface that interacts with the _Subscriptions Contract_. **Note** : The _Subscriptions App_ is not available now, we recommend using the [functions hardhat starter kit](https://github.com/smartcontractkit/functions-hardhat-starter-kit) to interact with the _Subscriptions Contract_.
  * Subscriptions Contract (aka [Functions Billing Registry Contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/dev/functions/FunctionsBillingRegistry.sol)): The contract that holds user funds to pay for _Chainlink Functions_ requests.
  * subscription account: An account that holds LINK tokens and makes them available to fund requests to Chainlink DON. A _Subscription ID_ uniquely IDentifies each account.
  * Subscription ID: 64-bit unsigned integer

:::NEXT DOC:::

# Chainlink Functions Concepts

  * Overview
  * Request and Receive Data
  * Decentralized Oracle Network (DON)
  * Subscriptions

_Chainlink Functions_ do not require your consumer contracts to hold LINK
tokens and send them to oracles when making requests. Instead, you must create
a subscription account and fund it to pre-pay for your _Chainlink Functions_
requests, so your consumer contracts don't need to hold LINK when calling
_Chainlink Functions_.

Before you explore how Chainlink Functions works in the
[Architecture](/chainlink-functions/resources/architecture) guide, it is best
to understand the core concepts in this guide.

## Request and Receive Data

This model is similar to the [Basic Request Model](/architecture-overview/architecture-request-model): Consumer contracts initiate the cycle by
creating requests to Functions Oracle contracts. Oracle nodes watch for events
emitted by the [Functions Oracle
contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/dev/functions/FunctionsOracle.sol)
and run the computation off-chain. Finally, oracle nodes use the [Chainlink
OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the
responses before passing the aggregated responses to the consumer contracts in
callbacks. Note: As long as you use vanilla Node.js (no modules imports), you
can decentralize any computation you want such as API calls, computing maths
operations, etc.

## Decentralized Oracle Network (DON)

_Chainlink Functions_ are powered by a [Decentralized Oracle
Network](https://chain.link/education/blockchain-oracles#decentralized-oracles). The oracle nodes are independent of each other and are responsible
for running the same function such as API calls, computing maths

:::NEXT DOC:::

friend Jim (trust me, he is good!) is an expert in cryptocurrency prices, and he even has a server set up that we can access for price data. Awesome, we'll make Jim our oracle and he will provide price data to our NFT smart contract.

But wait‚Ä¶.didn‚Äôt all the great properties of smart contracts and blockchains come from their decentralized nature? What if Jim wanted to maliciously send our smart contract bad price data so he could manipulate it in his favor? What if his server goes offline when the NFT needs to update and thus can‚Äôt? What if Jim isn‚Äôt even malicious but gets hacked by a malicious actor? This single oracle solution isn‚Äôt solving much of the oracle problem because it isn‚Äôt <i>decentralized</i>, and thus provides a weak link that ruins all of those awesome smart contract properties. You need to trust that Jim, and my word on Jim, that he is a great person and will act in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?

Finally we are here‚Ä¶...enter Chainlink!

<Spacer>

## Chainlink and Decentralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Using a Chainlink Decentralized Oracle Network (DON) as the Oracle for your dNFT can give you strong guarantees that your artwork will truly update with the latest,

:::NEXT DOC:::

a data feed, the quality of the data feed improves. For this
reason, each data feed has its own properties depending on the needs of its
community of users.

## Decentralized Oracle Network

Each data feed is updated by a decentralized oracle network. Each oracle
operator is rewarded for publishing data. The number of oracles contributing
to each feed varies. In order for an update to take place, the data feed
aggregator contract must receive responses from a minimum number of oracles or
the latest answer will not be updated. You can see the minimum number of
oracles for the corresponding feed at
[data.chain.link](https://data.chain.link).

Each oracle in the set publishes data during an aggregation round. That data
is validated and aggregated by a smart contract, which forms the feed's latest
and trusted answer.

## Components of a Decentralized Oracle Network

Data Feeds are an example of a decentralized oracle network, and include the
following components:

  * A consumer contract
  * A proxy contract
  * An aggregator contract

To learn how to create a consumer contract that uses an existing data feed,
read the [Using Data Feeds](/data-feeds/price-feeds) documentation.

### Consumer

A Consumer contract is any contract that uses Chainlink Data Feeds to consume
aggregated data. Consumer contracts must reference the correct
[`AggregatorV3Interface`](https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol)
contract and call one of the exposed functions.


    ...
    AggregatorV3Interface feed = AggregatorV3Interface(address);
    return feed.latestRoundData();

Off-chain applications can also consume data feeds. See the Javascript and
Python example code on the [Using Data

:::NEXT DOC:::

#####Chapter 6:

# Chainlink Data Feeds

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Now that you understood how to connect the off-chain world you can utilize this knowledge now for your NFT. Imagine a NFT that reacts to the price of Ethereum. It could rain when the price falls and it could be sunny when the price rises.
    </div>
  </div>
</ContentWrapp>

As discussed in the previous lesson, Chainlink gives developers the ability to create extremely powerful DON‚Äôs that provide smart contracts with the highest quality data from outside the blockchain. As a smart contract developer, how can you take advantage of these DONs in your own smart contracts? Chainlink is open source so there‚Äôs always the option of making your own DON, but creating a DON is a complex and nuanced process. Instead, in the spirit of the old developer adage ‚ÄúNever build something twice‚Äù, use existing DONs if possible.

Luckily, many of the largest and highest quality node operators in the blockchain industry have already combined their knowledge and prowess to create DONs that serve the most in-demand data for smart contract developers to take advantage of. These data serving DONs are called <ColorWord>Chainlink Data Feeds</ColorWord>. Currently most of the data feeds provide data on various currency and cryptocurrency pairs, as that was initially what smart contract developers needed, but data feeds can be used to retrieve any type of data.

You can see these data feeds updating",right,
how can I take advantage of decentralized oracle networks (DONs) in my own smart contracts,https://www.chainlink.education/chainlinkIntroduction/chapter-6,"Chainlink is open source so there‚Äôs always the option of making your own DON, but creating a DON is a complex and nuanced process. Instead, in the spirit of the old developer adage ‚ÄúNever build something twice‚Äù, use existing DONs if possible.","You can take advantage of decentralized oracle networks (DONs) in your own smart contracts by using Chainlink, a platform for creating DONs that provide various smart contract services. With Chainlink, you can create a price oracle that involves multiple trusted and expert crypto price data aggregators, rather than relying on a single centralized oracle. Developers can customize and build DONs with Chainlink, specifying what data is needed, how nodes come to an agreement, when nodes should post updates, and any other computation nodes should perform. Using Chainlink DONs can provide strong guarantees that your smart contract will remain decentralized and update with the latest, most accurate data.","run the computation off-chain. Finally, oracle nodes use the [Chainlink
OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the
responses before passing the aggregated responses to the consumer contracts in
callbacks. Note: As long as you use vanilla Node.js (no modules imports), you
can decentralize any computation you want such as API calls, computing maths
operations, etc.

## Decentralized Oracle Network (DON)

_Chainlink Functions_ are powered by a [Decentralized Oracle
Network](https://chain.link/education/blockchain-oracles#decentralized-oracles). The oracle nodes are independent of each other and are responsible
for running the same function such as API calls, computing maths operations,
etc. The nodes use the [Chainlink OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the nodes' responses. Finally, a DON's
oracle sends the aggregate response to the consumer contract in a callback.

## Subscriptions

  * Subscriptions App: A user interface that interacts with the _Subscriptions Contract_. **Note** : The _Subscriptions App_ is not available now, we recommend using the [functions hardhat starter kit](https://github.com/smartcontractkit/functions-hardhat-starter-kit) to interact with the _Subscriptions Contract_.
  * Subscriptions Contract (aka [Functions Billing Registry Contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/dev/functions/FunctionsBillingRegistry.sol)): The contract that holds user funds to pay for _Chainlink Functions_ requests.
  * subscription account: An account that holds LINK tokens and makes them available to fund requests to Chainlink DON. A _Subscription ID_ uniquely IDentifies each account.
  * Subscription ID: 64-bit unsigned integer

:::NEXT DOC:::

in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?

Finally we are here‚Ä¶...enter Chainlink!

<Spacer>

## Chainlink and Decentralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Using a Chainlink Decentralized Oracle Network (DON) as the Oracle for your dNFT can give you strong guarantees that your artwork will truly update with the latest, most acurate data and remain decentralized. 
    </div>
  </div>
</ContentWrapp>

Smart contracts have special properties and need decentralized oracles to carry out functions. This is where Chainlink comes in. <ColorWord>Chainlink is a platform for creating decentralized oracle networks that provide various smart contract services</ColorWord>. So using Chainlink, we can create a price oracle that isn‚Äôt just Jim but Jim and 30 other of the most trusted and expert crypto price data aggregators out there and make them come to an agreement.

Chainlink allows developers to create and customize any type of <ColorWord>Decentralized Oracle Network</ColorWord>, or DONs, a smart contract might need. Developers can choose which nodes are a part of a network, what type of data each node is looking for, how nodes come to an agreement, when nodes should post updates, and any other computation nodes should perform.

:::NEXT DOC:::

friend Jim (trust me, he is good!) is an expert in cryptocurrency prices, and he even has a server set up that we can access for price data. Awesome, we'll make Jim our oracle and he will provide price data to our NFT smart contract.

But wait‚Ä¶.didn‚Äôt all the great properties of smart contracts and blockchains come from their decentralized nature? What if Jim wanted to maliciously send our smart contract bad price data so he could manipulate it in his favor? What if his server goes offline when the NFT needs to update and thus can‚Äôt? What if Jim isn‚Äôt even malicious but gets hacked by a malicious actor? This single oracle solution isn‚Äôt solving much of the oracle problem because it isn‚Äôt <i>decentralized</i>, and thus provides a weak link that ruins all of those awesome smart contract properties. You need to trust that Jim, and my word on Jim, that he is a great person and will act in the best interest of everyone. But what if we had a decentralized middleware solution, one where Jim doesn‚Äôt control everything (sorry Jim), so we didn‚Äôt have to trust him?

Finally we are here‚Ä¶...enter Chainlink!

<Spacer>

## Chainlink and Decentralized Oracles

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
     Using a Chainlink Decentralized Oracle Network (DON) as the Oracle for your dNFT can give you strong guarantees that your artwork will truly update with the latest,

:::NEXT DOC:::

# Chainlink Functions Concepts

  * Overview
  * Request and Receive Data
  * Decentralized Oracle Network (DON)
  * Subscriptions

_Chainlink Functions_ do not require your consumer contracts to hold LINK
tokens and send them to oracles when making requests. Instead, you must create
a subscription account and fund it to pre-pay for your _Chainlink Functions_
requests, so your consumer contracts don't need to hold LINK when calling
_Chainlink Functions_.

Before you explore how Chainlink Functions works in the
[Architecture](/chainlink-functions/resources/architecture) guide, it is best
to understand the core concepts in this guide.

## Request and Receive Data

This model is similar to the [Basic Request Model](/architecture-overview/architecture-request-model): Consumer contracts initiate the cycle by
creating requests to Functions Oracle contracts. Oracle nodes watch for events
emitted by the [Functions Oracle
contract](https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/dev/functions/FunctionsOracle.sol)
and run the computation off-chain. Finally, oracle nodes use the [Chainlink
OCR](/architecture-overview/off-chain-reporting) protocol to aggregate all the
responses before passing the aggregated responses to the consumer contracts in
callbacks. Note: As long as you use vanilla Node.js (no modules imports), you
can decentralize any computation you want such as API calls, computing maths
operations, etc.

## Decentralized Oracle Network (DON)

_Chainlink Functions_ are powered by a [Decentralized Oracle
Network](https://chain.link/education/blockchain-oracles#decentralized-oracles). The oracle nodes are independent of each other and are responsible
for running the same function such as API calls, computing maths

:::NEXT DOC:::

Smart contracts have special properties and need decentralized oracles to carry out functions. This is where Chainlink comes in. Chainlink is a platform for creating decentralized oracle networks that provide various smart contract services. So using Chainlink, we can create a price oracle that isn‚Äôt just Jim but Jim and 30 other of the most trusted and expert crypto price data aggregators out there and make them come to an agreement.


:::NEXT DOC:::

smart contracts? Chainlink is open source so there‚Äôs always the option of making your own DON, but creating a DON is a complex and nuanced process. Instead, in the spirit of the old developer adage ‚ÄúNever build something twice‚Äù, use existing DONs if possible.

Luckily, many of the largest and highest quality node operators in the blockchain industry have already combined their knowledge and prowess to create DONs that serve the most in-demand data for smart contract developers to take advantage of. These data serving DONs are called <ColorWord>Chainlink Data Feeds</ColorWord>. Currently most of the data feeds provide data on various currency and cryptocurrency pairs, as that was initially what smart contract developers needed, but data feeds can be used to retrieve any type of data.

You can see these data feeds updating in real time at data.chain.link. There you can select different blockchains Chainlink DONs are posting data to, as well view the details of each DON that compose a particular data feed. For instance if you click on the ETH/USD data feed you will see all the nodes involved in the DON, what price each individual node posted, and the final aggregated price of the asset. Some important terms you may notice are:

<p><ColorWord>Rounds</ColorWord>DONs update data feeds in rounds. When a new round is initiated the nodes in a DON retrieve the latest data point from data providers, aggregate the data at the individual node level and finally aggregate the between the nodes. Once the final aggregated data point, along with each individual nodes observation, is posted on-chain the round is considered complete.</p>
<p><ColorWord>Heartbeat</ColorWord>The maximum amount of time that is allowed to pass before the DON automatically starts a new round and updates the

:::NEXT DOC:::

special properties and need decentralized oracles to carry out functions. This is where Chainlink comes in. <ColorWord>Chainlink is a platform for creating decentralized oracle networks that provide various smart contract services</ColorWord>. So using Chainlink, we can create a price oracle that isn‚Äôt just Jim but Jim and 30 other of the most trusted and expert crypto price data aggregators out there and make them come to an agreement.

Chainlink allows developers to create and customize any type of <ColorWord>Decentralized Oracle Network</ColorWord>, or DONs, a smart contract might need. Developers can choose which nodes are a part of a network, what type of data each node is looking for, how nodes come to an agreement, when nodes should post updates, and any other computation nodes should perform. Finally, with Chainlink, developers can build smart contracts that can interact with the outside world to preserve the decentralized nature of smart contracts.

<Spacer>

## How Chainlink Works

<ContentWrapp>
  <div class=""imgContainer"">
    <img alt=""story_image_2_0"" src=""/images/chapter/man.svg"" width=""150px"" height=""150px"">
  </div>

  <div class=""itemsContainer"">
    <div class=""item-text"">
      Curious how Chainlink works? Read below! With Chainlink, any type of data the exists can be brought on chain, and the conditions on which that data is delivered can be customized! 
    </div>
  </div>
</ContentWrapp>

Chainlink allows developers to build and customize DONs. Chainlink allows DONs to work and assures that node operators are incentivized not to collude or act

:::NEXT DOC:::

in the data before it is posted on-chain, regardless of how much time has elasped. For example, if the ETH/USD deviation threshold is set to 1%, then the DON will update the data feed if it senses the price of ETH versus USD fluctuates more than 1%.

<br>
<b>How DONs Provide Data</b>

Ideally, nodes should retrieve data from multiple sources and <i>aggregate</i>, or combine, the data to return the most accurate price they can. Developers can use external adapters to customize the sources that nodes use to aggregate data. <ColorWord>External adapters</ColorWord> are custom built software packages that can be added to the nodes. These can be built in any programming language and perform any operations developers may find useful. These operations can be as simple as basic arithmetic but can span to being complex machine learning algorithms.

<br>
<b>How Consensus is Reached Among Nodes</b>

All of the different nodes in the DON have their own version of the price. Using this information, developers customize the aggregation method of Chainlink DONs to determine one value for the true price. This is another level of aggregation beyond the aggregation completed at the individual node level. Having multiple levels of aggregation ensures the highest level of data quality. This <i>aggregation method</i> can consist of any type of operation including median, mean, weighted mean, mode, or other calculations. In our dynamic NFT will make use of a data feed that takes the median of all the node‚Äôs price data, since the median is more resistant to outliers than the mean.


:::NEXT DOC:::

Finance (DeFi), a popular use case of Chainlink DONs is relating them with price data. However, any type of data that is available in a digital format can be accessed. This includes but is not limited to weather data, YouTube views, sensor data, or even data from other blockchains. For the NFT we‚Äôre just going to stick to price data for now, specifically the ETH/USD price, but you can imagine all the possibilities of cool smart contracts we can make with all of the digital data available today!

<br>
<b>When DONS Provide Data</b>

Some applications require a DON that updates the data once a day. Others need updates once every five minutes or only when the data itself changes by a certain amount. The term <ColorWord>heartbeat</ColorWord> is used to describe the max amount of time that can elapse before a DON updates it's data feed The term <ColorWord>deviation threshold</ColorWord> is used to describe how much variation is allowed in the data before it is posted on-chain, regardless of how much time has elasped. For example, if the ETH/USD deviation threshold is set to 1%, then the DON will update the data feed if it senses the price of ETH versus USD fluctuates more than 1%.

<br>
<b>How DONs Provide Data</b>

Ideally, nodes should retrieve data from multiple sources and <i>aggregate</i>, or combine, the data to return the most accurate price they can. Developers can use external adapters to customize the sources that nodes use to aggregate data. <ColorWord>External adapters</ColorWord> are custom built software packages that can be added to the nodes. These can be built in any programming language and perform any operations developers may find useful. These operations can be as simple as

:::NEXT DOC:::

the users will put there
referrer's address and that would go to the database and then the smart
contract will make a call to the database through oracles and get all the
addresses and there levels and then the contract will pay them accordingly.

My question is how can I make this happen? I know using oracles is the way but
I couldn't understand how to implement it in the code to make it work. Can
anyone help me??



Answers:
(Answered on: 2022-10-03 02:35:01)


[Chailink AnyAPI](https://docs.chain.link/docs/any-api/introduction/) allows
you to fetch any data from off-chain API and write the data back to on-chain
smart contract.

To use Chainlink AnyAPI, you should run a Chainlink node(you can find how to
run a Chainlink node [here](https://docs.chain.link/chainlink-nodes/)) or rely
on oracle nodes run by others(read more details
[here](https://docs.chain.link/docs/any-api/find-oracle/)).

With the Chainlink node, you are able to deploy an oracle contract and monitor
requests from the smart contract(your dApp). Request from your smart contract
can trigger the Chainlink node to finish its job and write back data to the
smart contract. In your dApp, the smart contract can send a request to your
database and get the referrer info with Chainlink Any API.

A full tutorial can be found
[here](https://www.youtube.com/watch?v=fICFYsN4E74).



",right,
What workflow.yaml file can I use for brownie? ,https://stackoverflow.com/questions/76442258/brownie-github-actions-workflow,,"There is no information provided about a workflow.yaml file for Brownie. The context information only includes details about dependencies, troubleshooting installation issues, and resolving compiling issues.","   
    
    dependencies:
       # - <organization/repo>@<version>
           - smartcontractkit/chainlink-brownie-contracts@1.1.1
                 compiler:
                        solc:
                       remappings:
                                                     
                            - '@chainlink=smartcontractkit/chainlink-brownie-contracts@1.1.1'
    



Answers:
(Answered on: 2022-05-30 00:12:40)


I started over. I guess I forgot a step in the file creation, and fixed some
formatting issues in the brownie-config,yaml file. I am all set. I resolved my
issues here.





:::NEXT DOC:::

check this go through this documentation


---
(Answered on: 2021-07-15 12:19:59)


Going by the stack trace you posted, it looks like you're trying to initialise
brownie a folder in a folder that does not yet exist. The `FileNotFoundError`
is thrown when there are parent-folders that don't exist yet in the path (see
[Python docs for mkdir
here](https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir)),
which is likely what's happening here.

I can reproduce this error by doing `brownie init ~/test-folder-that-
doesn't-exist/brownie`, where brownie and test-folder-doesn't-exist both are
directories that are yet to be made. but doing `brownie init ~/brownie` does
work (even if brownie has not been made yet)

Hope this helps!





:::NEXT DOC:::

       remappings:
          - ""@chainlink=smartcontractkit/chainlink-brownie-contracts@0.2.1""
    dotenv: .env
    networks:
      rinkeby:
        eth_usd_price_feed: ""0x035dCD3b056BdDbf82273A1b93c7B8cd25614995""
      kovan:
      mainnet:
    wallets:
      from_key: ${PRIVATE_KEY}
    

I just needed to remove the kovan and mainnet and then it started working!


---
(Answered on: 2022-04-01 04:13:40)


Update: Took me hours but the problem was I had empty spaces in my brownie-
config.yaml

A 3 hour bug for a 5 second fix :)





:::NEXT DOC:::

   URI: http://127.0.0.1:8545
    



Answers:
(Answered on: 2022-02-11 01:04:41)


Most likely the issue you're dealing with is because ganache is already
running in another active project, in order to have brownie recognize ganache
is to make sure that's the only environment running ganache close to the
project running the node. Which, is most likely the web3 simple storage
file... not the newly created brownie file.


---
(Answered on: 2021-12-15 21:02:17)


Looks like this can be resolved using nvm v 16.

    
    
    nvm install 16
    nvm use 16
    node --version
    v16.13.1
    
    x@y brownie_simple_storage % brownie run scripts/deploy.py
    Brownie v1.17.2 - Python development framework for Ethereum
    
    BrownieSimpleStorageProject is the active project.
    
    Launching 'ganache-cli --port 8545 --gasLimit 12000000 --accounts 10 --hardfork istanbul --mnemonic brownie'...
    
    Running 'scripts/deploy.py::main'...
    Hello!
    Terminating local RPC client...
    





:::NEXT DOC:::

Question: (Asked on: 2021-07-12 10:37:25)
Troubleshooting brownie installation
URL: https://stackoverflow.com/questions/68345891/troubleshooting-brownie-installation

Question Body:


I am preparing for the chainlink bootcamp and my brownie installation seems to
be ok but when I try `brownie init`I get an error, even when I run as
administrator and if I specify the file. See link below for screenshot.

    
    
    C:\WINDOWS\system32>brownie init C:\Users\Chris\Documents\Brownie
    INFO: Could not find files for the given pattern(s).
    Brownie v1.14.6 - Python development framework for Ethereum
    
      File ""c:\users\chris\appdata\local\programs\python\python39\lib\site-packages\brownie\_cli\__main__.py"", line 64, in main
        importlib.import_module(f""brownie._cli.{cmd}"").main()
      File ""c:\users\chris\appdata\local\programs\python\python39\lib\site-packages\brownie\_cli\init.py"", line 31, in main
        path = project.new(args[""<path>""] or ""."", args[""--force""], args[""--force""])
      File ""c:\users\chris\appdata\local\programs\python\python39\lib\site-packages\brownie\project\main.py"", line 583, in new
        _create_folders(project_path)
      File ""c:\users\chris\appdata\local\programs\python\python39\lib\site-packages\brownie\project\main.py"", line 920, in _create_folders
       

:::NEXT DOC:::

same error:

"" _...ParserError: Source file requires different compiler version (current
compiler is **0.8.13** +commit.abaa5c0e.Windows.msvc)..._"", showing that my
compiler version remains unchanged.

(I have the default compiler set to remote, and I also tried restarting any
open terminals after making these changes.)

I had installed solcx with pip, and also have a .solcx folder in my
""C:/Users/me"" directory, which contains a folder ""solc-v0.8.13"". I tried
deleting that folder and compiling again, but brownie automatically downloaded
the same v0.8.13.

I'm stumped on how to change the global or workspace compiler version. Could
the version of solc be getting overridden from somewhere other than my VSCode
settings?



Answers:
(Answered on: 2022-04-05 05:51:46)


Add following `brownie-config.yaml` file to your project:

    
    
    compiler:
      solc:
        version: 0.6.12
    

When you `compile`, brownie will download `solc` version from config.





:::NEXT DOC:::

   

[Brownie error screenshot](https://i.stack.imgur.com/9asJ4.png)



Answers:
(Answered on: 2021-11-02 00:04:10)


This maybe silly, but I had the same problem and I solved like this: I just
move to the folder where I wanted to init my project and just run: `brownie
init my-projects-name` and it worked perfectly. It is important that **my-
projects-name** folder _WAS NOT CREATED_ before running. So maybe you can run:

    
    
    cd C:\Users\Chris\Documents\Brownie
    brownie init my-first-brownie-project
    


---
(Answered on: 2021-07-22 07:23:49)


As per this <https://eth-brownie.readthedocs.io/en/stable/install.html>

Brownie is depends on some dependencies

  1. python3 version 3.6 or greater, python3-dev

  2. ganache-cli - tested with version 6.12.2

please check this go through this documentation


---
(Answered on: 2021-07-15 12:19:59)


Going by the stack trace you posted, it looks like you're trying to initialise
brownie a folder in a folder that does not yet exist. The `FileNotFoundError`
is thrown when there are parent-folders that don't exist yet in the path (see
[Python docs for mkdir
here](https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir)),
which is likely what's happening here.

I can reproduce this error by doing `brownie init ~/test-folder-that-
doesn't-exist/brownie`, where brownie and test-folder-doesn't-exist both are
directories that are yet to be made. but doing `brownie init

:::NEXT DOC:::

framework for Ethereum
    
    ChainlinkMixProject is the active project.
    /usr/local/lib/python3.9/site-packages/brownie/network/main.py:44: BrownieEnvironmentWarning: Development network has a block height of 14
      warnings.warn(
    Attached to local RPC client listening at '127.0.0.1:8545'...
    
    Running 'scripts/price_feed_scripts/02_read_price_feed.py::main'...
    <brownie.network.contract.ContractContainer object at 0x10e410dc0>
      File ""brownie/_cli/run.py"", line 51, in main
        return_value, frame = run(
      File ""brownie/project/scripts.py"", line 103, in run
    return_value = f_locals[method_name](*args, **kwargs)
      File ""./scripts/price_feed_scripts/02_read_price_feed.py"", line 7, in main
        price_feed_contract = PriceFeedConsumer[-1]
      File ""brownie/network/contract.py"", line 175, in __getitem__
        return self._contracts[i]
    IndexError: list index out of range
    

ganache is set as default network in the brownie-config.yaml



Answers:
(Answered on: 2022-05-02 14:35:39)


Brownie doesn't save the location of deployed contracts to a local running
chain by default since they get deleted so often and would take up a ton of
space, so you have to tell brownie to remember stuff deployed to ganache.

In your `brownie-config.yaml` add

    
    
   

:::NEXT DOC:::

    Collecting pyyaml==5.4.1
          Using cached PyYAML-5.4.1-cp39-cp39-win_amd64.whl (213 kB)
        Collecting pytest-xdist==1.34.0
          Using cached pytest_xdist-1.34.0-py2.py3-none-any.whl (36 kB)
        Requirement already satisfied: toolz==0.11.1 in c:\python39\lib\site-packages (from eth-brownie) (0.11.1)
        Collecting jsonschema==3.2.0
          Using cached jsonschema-3.2.0-py2.py3-none-any.whl (56 kB)
        Collecting attrs==20.3.0
          Using cached attrs-20.3.0-py2.py3-none-any.whl (49 kB)
        Collecting sortedcontainers==2.3.0
          Using cached sortedcontainers-2.3.0-py2.py3-none-any.whl (29 kB)
        Requirement already satisfied: iniconfig==1.1.1 in c:\python39\lib\site-packages (from eth-brownie) (1.1.1)
        Collecting vyper==0.2.12
          Using cached vyper-0.2.12-py3-none-any.whl (222 kB)
        Collecting bitarray==1.2.2
          Using cached

:::NEXT DOC:::

Question: (Asked on: 2022-04-27 00:13:16)
Issue Brownie setup, not sure if ganache installed properly - chainlink hackathon
URL: https://stackoverflow.com/questions/72021879/issue-brownie-setup-not-sure-if-ganache-installed-properly-chainlink-hackatho

Question Body:


I am new to this space and having an issue getting brownie to run my first
deploy script. I am learning through the Chainlink Hackathon and following the
brownie tutorial by Patrick Collins. I think the problem is with ganache. Any
help would be appreciated.

When I ask for the version of ganache - it says not found (see below). when I
try to install via npm, I receive error no 13. Is this related to Mac OS?

Error message when trying to deploy script:

` brownie run scripts/deploy.py`

    
    
    >Brownie v1.18.1 - Python development framework for Ethereum
    
    (base) x:brownie-hack mariposa$ brownie run scripts/deploy.py
    Brownie v1.18.1 - Python development framework for Ethereum
    
    BrownieHackProject is the active project.
      File ""brownie/_cli/__main__.py"", line 64, in main
        importlib.import_module(f""brownie._cli.{cmd}"").main()
      File ""brownie/_cli/run.py"", line 45, in main
        network.connect(CONFIG.argv[""network""])
      File ""brownie/network/main.py"", line 50, in connect
        rpc.launch(active[""cmd""], **active[""cmd_settings""])
   ",wrong,wrong
Why does 'Maximum number of redirects exceeded' error when connecting to the OpenAI API,https://stackoverflow.com/questions/76218239/why-maximum-number-of-redirects-exceeded-error-when-connecting-to-the-openai-a,,"The 'Maximum number of redirects exceeded' error occurs when connecting to the OpenAI API due to a possible syntax error in the request itself. The error may be resolved by adjusting the code to include quotes around certain parameters such as Authorization, model, prompt, temperature, and max_tokens.","Question: (Asked on: 2023-05-10 12:08:23)
Why &#39;Maximum number of redirects exceeded&#39; error when connecting to the OpenAI API
URL: https://stackoverflow.com/questions/76218239/why-maximum-number-of-redirects-exceeded-error-when-connecting-to-the-openai-a

Question Body:


When I attempt to use the following code to interface with the OpenAI API by
chainlink functions, I encounter an error stating 'Maximum number of redirects
exceeded'. Here is the code I am using:

    
    
    const prompt = args[0]
    
    if (!secrets.openaiKey) {
      throw Error(""Need to set OPENAI_KEY environment variable"")
    }
    
    const openAIRequest = Functions.makeHttpRequest({
      url: ""https://api.openai.com/v1/completions"",
      method: ""POST"",
      headers: {
        Authorization: `Bearer ${secrets.openaiKey}`,
      },
      data: {
        model: ""text-davinci-003"",
        prompt: prompt,
        temperature: 1,
        max_tokens: 512,
      },
    })
    
    const [openAiResponse] = await Promise.all([openAIRequest])
    console.log(""raw response"", openAiResponse)
    
    const result =

:::NEXT DOC:::

would be greatly appreciated.

this prompt is ""Say this is a test in one line""



Answers:
(Answered on: 2023-05-11 09:26:48)


It's possible that the error is caused by some syntax error in the request
itself. Can you try to adjust your code to look like this?

    
    
    const openAIRequest = Functions.makeHttpRequest({
        url: ""https://api.openai.com/v1/completions"",
        method: ""POST"",
        headers: {
          'Authorization': `Bearer ${secrets.openaiKey}`,
        },
        data: {
          ""model"": ""text-davinci-003"",
          ""prompt"": prompt,
          ""temperature"": 1,
          ""max_tokens"": 512,
        },
      })
    

(Notice quotes around `Authorization`, `model`, `prompt`, `temperature`, and
`max_tokens`)





:::NEXT DOC:::

     method: ""POST"",
      headers: {
        Authorization: `Bearer ${secrets.openaiKey}`,
      },
      data: {
        model: ""text-davinci-003"",
        prompt: prompt,
        temperature: 1,
        max_tokens: 512,
      },
    })
    
    const [openAiResponse] = await Promise.all([openAIRequest])
    console.log(""raw response"", openAiResponse)
    
    const result = openAiResponse.data.choices[0].text
    return Functions.encodeString(result)
    

The error is: [enter image description
here](https://i.stack.imgur.com/6kAHf.png)

I am not sure why this is happening. Any help would be greatly appreciated.

this prompt is ""Say this is a test in one line""



Answers:
(Answered on: 2023-05-11 09:26:48)


It's possible that the error is caused by some syntax error in the request
itself. Can you try to adjust your code to look like this?

    
    
    const openAIRequest = Functions.makeHttpRequest({
        url: ""https://api.openai.com/v1/completions"",
        method: ""POST"",
        headers: {
          'Authorization': `Bearer ${secrets.openaiKey}`,
        },
    

:::NEXT DOC:::

   // example response:
    // {""id"":""cmpl-6jFdLbY08kJobPRfCZL4SVzQ6eidJ"",""object"":""text_completion"",""created"":1676242875,""model"":""text-davinci-003"",""choices"":[{""text"":""\n\nThis is indeed a test"",""index"":0,""logprobs"":null,""finish_reason"":""length""}],""usage"":{""prompt_tokens"":5,""completion_tokens"":7,""total_tokens"":12}}
    const openAIRequest = Functions.makeHttpRequest({
      url: ""https://api.openai.com/v1/completions"",
      method: ""POST"",
      headers: {
        Authorization: `Bearer ${secrets.openaiKey}`,
      },
      data: { model: ""text-davinci-003"", prompt: prompt, temperature: 1, max_tokens: 7 },
    })
    
    const [openAiResponse] = await Promise.all([openAIRequest])
    console.log(""raw response"", openAiResponse)
    
    const result = openAiResponse.data.choices[0].text
    
    return Functions.encodeString(result)
    
    

I have tried pointing my user prompt from `server.js` directly to the
`Functions-request-config.js` file using the `args` parameter of the
`requestConfig` object. I've also tried exporting the prompt as a variable
instead of an object. Both didn't help. I've double checked that my require()
statements at the top of my `Functions-request-source.js` file are also using
the correct file path

:::NEXT DOC:::

- EQt3xOiVtN"",""only_proxied_transfers"":false,""opensea_buyer_fee_basis_points"":""0"",""opensea_seller_fee_basis_points"":""250"",""payout_address"":null,""require_email"":false,""short_description"":null,""slug"":""roundrobin-

:::NEXT DOC:::

- EQt3xOiVtN"",""only_proxied_transfers"":false,""opensea_buyer_fee_basis_points"":""0"",""opensea_seller_fee_basis_points"":""250"",""payout_address"":null,""require_email"":false,""short_description"":null,""slug"":""roundrobin-

:::NEXT DOC:::

Adapter which uses
Axios for it's API calls as well, I get this error.
[](https://i.stack.imgur.com/BPUl6.png)

Here is a snippet of the main code of the external adapter from index.js

    
    
    const customParams = {
      artist: [''],
      
      endpoint: false
    }
    
    const createRequest = (input, callback) => {
      // The Validator helps you validate the Chainlink request data
    
      const apiID = process.env.API_ID
      const apiKey = process.env.API_KEY
    
      let token = 'BQDlkzka093OuR4tL7XyaI-Tag4R166FQGBSogBP6hEBxhsCjH8XfMRqs_apKFk0T87FGIrwPtT1bkuGCeE';
    
    
      const validator = new Validator(callback, input, customParams)
      const jobRunID = validator.validated.id
      const endpoint = validator.validated.data.endpoint
      const artistID = validator.validated.data.artist.toUpperCase()
      const url = `https://api.spotify.com/v1/artists/${artistID}`
    
      const params = {
        artistID
      }
    
      // curl -X ""GET""

:::NEXT DOC:::

Question: (Asked on: 2023-03-20 23:59:34)
Chainlink jobs returns error if external adapter takes too long for response
URL: https://stackoverflow.com/questions/75796310/chainlink-jobs-returns-error-if-external-adapter-takes-too-long-for-response

Question Body:


I am encountering this error when running a job via my own chainlink node even
though the external adapter is returning the data properly. `HTTP request
timed out or interrupted` This error is triggered during the ""fetch"" function
of the job. I have figured that the error is triggered because my external
adapter is taking some time to respond. Is there any way I can make my
chainlink node wait longer?

I tried a response with dummy data that did not require any API to fetch and
the job ran perfectly. The error has been fixed by the given answer.

However now after the job sends the data back to my oracle,
FulfillOracleRequest2 is not executing.
[](https://i.stack.imgur.com/naP0g.png)



Answers:
(Answered on: 2023-03-21 12:09:25)


Try increasing the DEFAULT_HTTP_TIMEOUT setting in your nodes configuration

<https://docs.chain.link/chainlink-
nodes/v1/configuration#default_http_timeout>





:::NEXT DOC:::

     File ""brownie/network/account.py"", line 642, in transfer
        receipt, exc = self._make_transaction(
      File ""brownie/network/account.py"", line 725, in _make_transaction
        raise VirtualMachineError(e) from None
      File ""brownie/exceptions.py"", line 121, in __init__
        raise ValueError(str(exc)) from None
    ValueError: Gas estimation failed: 'execution reverted: Must use whitelisted functions'. This transaction will likely revert. If you wish to broadcast, you must set the gas limit manually.
    

Note: this error doesn't occur when I comment out the requestOracleData()
function.



Answers:
(Answered on: 2021-09-28 23:32:59)


It is due to the fact that the node operator you are using on Rinkeby isn't
set up to handle large requests and is most likely using the `Oracle.sol` code
as their oracle contract, which doesn't accept the `requestOracleData()`
method.

You can either switch to Kovan and use the node given in the docs, search for
a different but compatible node on [market.link](https://market.link/), or
host your own node on Rinkeby which is compatible with this job.





:::NEXT DOC:::

Question: (Asked on: 2021-10-28 01:22:26)
Why am I receiving the following Chainlink error: cannot estimate gas
URL: https://stackoverflow.com/questions/69747214/why-am-i-receiving-the-following-chainlink-error-cannot-estimate-gas

Question Body:


I am trying to follow the Chainlink VRF tutorial found here:
<https://docs.chain.link/docs/intermediates-tutorial/> with hardhat and am
running into this issue when calling the rollDice function:

    
    
    Error: cannot estimate gas; transaction may fail or may require manual gas limit (error={""reason"":""cannot estimate gas; transaction may fail or may require manual gas limit"",""code"":""UNPREDICTABLE_GAS_LIMIT"",""method"":""estimateGas"",""transaction"":{""from"":""0x014Da1D627E6ceB555975F09D26B048644382Ac6"",""maxPriorityFeePerGas"":{""type"":""BigNumber"",""hex"":""0x9502f900""},""maxFeePerGas"":{""type"":""BigNumber"",""hex"":""0x9502f90e""},""to"":""0x5887946875A01D1BB79d6Fb357BceeA5A0096D2e"",""data"":""0xdd02d9e5000000000000000000000000014da1d627e6ceb555975f09d26b048644382ac6"",""type"":2,""accessList"":null}},",partial,right
How to run test for ETH to USD conversion with chainlink?,https://stackoverflow.com/questions/76116055/how-to-run-test-for-eth-to-usd-conversion-with-chainlink,,"The question is asking for guidance on how to run a test for ETH to USD conversion with Chainlink. The code provided includes a Bank contract that has a function to convert ETH to USD using the Chainlink AggregatorV3Interface. The test code is also provided, but the issue is with the last two lines where the test is trying to print out the USD amount a user has in their account. The error message ""VM Exception while processing transaction: revert"" is being encountered when trying to call the convertToUSD function. The answer provided suggests that the issue is with using the wrong Chainlink address for the conversion and that the correct address needs to be used when testing with the contract deployed on the correct testnet.","Question: (Asked on: 2023-04-27 01:03:24)
How to run test for ETH to USD conversion with chainlink?
URL: https://stackoverflow.com/questions/76116055/how-to-run-test-for-eth-to-usd-conversion-with-chainlink

Question Body:


I have the following code for Bank.sol

    
    
    // SPDX-License-Identifier: MIT
    pragma solidity >=0.4.22 <0.9.0;
    
    import ""@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol"";
    import ""@openzeppelin/contracts/token/ERC20/IERC20.sol"";
    import ""@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol"";
    import ""@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol"";
    import ""@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol"";
    
    contract Bank is Initializable, AccessControlUpgradeable {
        // Code to handle two different roles: Manager and User
        bytes32 public constant MANAGER_ROLE = keccak256(""MANAGER_ROLE"");
        bytes32 public constant USER_ROLE = keccak256(""USER_ROLE"");
        mapping(address => uint256) private _balances;
    
    
        // Code for initializer
        function initialize() public initializer {
    
        }
    
  

:::NEXT DOC:::

() => {
            const bank = await Bank.new()
            const depositer = accounts[1]
            const amount = web3.utils.toWei('10', 'ether')
            await bank.deposit({from: depositer, value: amount})
            let balance = await bank.balanceOf(depositer)
            balance = parseInt(web3.utils.fromWei(balance, 'ether'))
            assert.equal(balance, 10)
            let usd = await bank.convertToUSD(depositer)
            console.log(usd)
        })
    })
    

The test works without the last 2 lines. However, I am trying to get the code
to print out in USD, the amount a user has in his account. For some reason, I
am getting a `VM Exception while processing transaction: revert` error on
bank.convertToUSD(depositer)

It would be great if someone could shed light on what I may have done wrong as
it is my first time learning this. Thank you!



Answers:
(Answered on: 2023-04-27 19:08:13)


I found the solution. When using chainlink, you need to specifically choose
what address from chainlink you want to do your conversion with, and when you
do normal testing, it is done locally where such an address doesn't exist. The
problem is fixed when you use the correct address and test it with the
contract being deployed on the correct testnet.





:::NEXT DOC:::

import ""@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol"";
    
    contract Bank is Initializable, AccessControlUpgradeable {
        // Code to handle two different roles: Manager and User
        bytes32 public constant MANAGER_ROLE = keccak256(""MANAGER_ROLE"");
        bytes32 public constant USER_ROLE = keccak256(""USER_ROLE"");
        mapping(address => uint256) private _balances;
    
    
        // Code for initializer
        function initialize() public initializer {
    
        }
    
        function deposit() public payable {
            _balances[msg.sender] += msg.value;
    
        }
    
        function convertToUSD(address account) public view returns (uint256) {
            uint256 ethAmount = _balances[account];
            int256 price = getLatestPrice();
            uint256 usdAmount = uint256(price) * ethAmount / 1e18;
            return usdAmount;
        }
    
        function getLatestPrice() public view returns (int256) {
            AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);
   

:::NEXT DOC:::

here](https://docs.chain.link/data-feeds/price-feeds/addresses/) get the
`ETH/USD` goerli testnet address:""0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e""

  * Now in order to call chainlink oracle you have to have `LINK` token in your contract. Get some link token to your conract address [from the faucet](https://faucets.chain.link/)

  * Import the token in metamask. you will see the amount

  * send link token from your metamask to your contract

  * deploy your contract. if you are using `Remix IDE` chose the `injected provider` to connect to metamask. Because chainlink contract is on goerli, so you need to be on Goerli testnet. Once deployment goes through you can call the `fund` function.

  * Since the `fund` function has no argument, you need to send the value alongside the transaction. That is why inside the function you have `msg.value` to access to the sent amount.

  * In `Remix` ide, under ""GAS LIMIT`input there is`VALUE`input. you need to pass the amount in there before you call the`fund` function.





:::NEXT DOC:::

(uint256) {
            return _balances[account];
        }
    
        function withdraw(uint _amount) public {
            require (_balances[msg.sender] >= _amount, ""Insufficient balance"");
            _balances[msg.sender] -= _amount;
            (bool sent,) = msg.sender.call{value: _amount}(""sent"");
            require(sent, ""Failed to Complete"");
        }
    }
    

And I am trying to run a test for it using Truffle

    
    
    const Bank = artifacts.require('Bank.sol')
    
    contract(""Bank"", async accounts => {
        it(""User should be able to deposit funds"", async () => {
            const bank = await Bank.new()
            const depositer = accounts[1]
            const amount = web3.utils.toWei('10', 'ether')
            await bank.deposit({from: depositer, value: amount})
            let balance = await bank.balanceOf(depositer)
            balance = parseInt(web3.utils.fromWei(balance, 'ether'))
            assert.equal(balance, 10)
            let usd = await

:::NEXT DOC:::

account) public view returns (uint256) {
            uint256 ethAmount = _balances[account];
            int256 price = getLatestPrice();
            uint256 usdAmount = uint256(price) * ethAmount / 1e18;
            return usdAmount;
        }
    
        function getLatestPrice() public view returns (int256) {
            AggregatorV3Interface priceFeed = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);
            (, int256 price, , , ) = priceFeed.latestRoundData();
            return price;
        }
    
        function balanceOf(address account) public view returns (uint256) {
            return _balances[account];
        }
    
        function withdraw(uint _amount) public {
            require (_balances[msg.sender] >= _amount, ""Insufficient balance"");
            _balances[msg.sender] -= _amount;
            (bool sent,) = msg.sender.call{value: _amount}(""sent"");
            require(sent, ""Failed to Complete"");
        }
    }
    

And I am trying to run a test for it using

:::NEXT DOC:::

use [Chainlink Any-
API](https://docs.chain.link/docs/make-a-http-get-request/) calls to bring it
into your smart contract

To do so, you need to know 3 things

  1. The API endpoint that contains the data, and the inputs required
  2. The outputs that the API returns, including their types (integer, string etc), as well as the path in the resulting JSON that contains the data you want
  3. A Chainlink oracle on the network you're contract is on that has a compatible job that you can use (whether one you run yourself or someone elses)

Once you have these things, you can use the example consumer contract in the
docs linked above, and then change the values to suit. ie here is an example
contract that will make an API call to PancakeSwap to get the price of
PancakeSwap token on BSC testnet:

1 - API address and inputs. In this case, according to your linked docs, the
URL of the API call is
`https://api.pancakeswap.info/api/v2/tokens/0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82`.
The only input required is the token address in the URL

2 - We want the price, which is an integer and in the 'price' JSON element. We
will multiply the price by 10**8 when we bring it on-chain because Solidity
can't handle decimals

3 - Because this is a simple API call, we can use a community run CL node that
takes a HTTP GET request, parses the JSON to find an element we specify, then
multiplies the result and converts it to the type we want before returning it
on-chain. Taking a look at the [BSC testnet jobs

:::NEXT DOC:::

Open [ATestnetConsumer.sol in Remix](https://remix.ethereum.org/#url=https://docs.chain.link/samples/APIRequests/ATestnetConsumer.sol).

  2. Note that `setChainlinkToken(0x779877A7B0D9E8603169DdbD7836e478b4624789)` is configured for _Sepolia_.

  3. On the **Compiler** tab, click the **Compile** button for `ATestnetConsumer.sol`.

  4. On the **Deploy and Run** tab, configure the following settings:

    * Select _Injected Provider_ as your environment. Make sure your metamask is connected to Sepolia.
    * Select _ATestnetConsumer_ from the **Contract** menu.
  5. Click **Deploy**. MetaMask prompts you to confirm the transaction.

  6. Fund the contract by sending LINK to the contract's address. See the [Fund your contract](/resources/fund-your-contract) page for instructions. The address for the `ATestnetConsumer` contract is on the list of your deployed contracts in Remix. You can fund your contract with 1 LINK.

  7. After you fund the contract, create a request. Input your operator contract address and the job ID for the `Get > Uint256` job into the `requestEthereumPrice` request method **without dashes**. The job ID is the `externalJobID` parameter, which you can find on your job's definition page in the Node Operators UI.

  8. Click the **transact** button for the `requestEthereumPrice` function and approve the transaction in Metamask. The `requestEthereumPrice` function asks the node to retrieve `uint256` data specifically from [https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD](https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=USD).

  9. After the transaction

:::NEXT DOC:::

a price feed on Kovan testnet, [it is
not available on that specific network](https://docs.chain.link/docs/ethereum-
addresses/#Kovan%20Testnet). It is [available on Ethereum
mainnet](https://docs.chain.link/docs/ethereum-addresses/#Ethereum%20Mainnet)
however.

If you are testing using the price feed, you can always use a mock contract to
mock the behavior of the feeds for testing purposes only.


---
(Answered on: 2021-09-23 22:11:12)


You have set incorrect ChainLink address!

correct ETH/USD address: `0x9326BFA02ADD2366b30bacB125260Af641031331`

Address you are using in on BSC network, not Kovan network!





:::NEXT DOC:::

 2. Compile and deploy the contract using the Injected Provider environment. The contract includes all the configuration variables for the _Sepolia_ testnet. Make sure your wallet is set to use _Sepolia_. The _constructor_ sets the following parameters:

    * The Chainlink Token address for _Sepolia_ by calling the [`setChainlinkToken`](/any-api/api-reference/#setchainlinktoken) function.
    * The Oracle contract address for _Sepolia_ by calling the [`setChainlinkOracle`](/any-api/api-reference/#setchainlinkoracle) function.
    * The `jobId`: A specific job for the oracle node to run. In this case, you must call a job that is specifically configured to return _ETH_ price against _BTC_ , _USD_ and _EUR_. You can find the job spec for the Chainlink node [here](/chainlink-nodes/job-specs/multi-word-job).
  3. Fund your contract with 0.1 LINK. To learn how to send LINK to contracts, read the [Fund Your Contracts](/resources/fund-your-contract) page.

  4. Call the `btc`, `usd` , and `eur` functions to confirm that the respective `btc`, `usd` , and `eur` state variables are equal to _zero_.

  5. Run the `requestMultipleParameters` function. This builds the `Chainlink.Request` using the correct parameters:

    * The `req.add(""urlBTC"", ""<cryptocompareETHBTCURL>"")` request parameter provides the oracle node with the [url](https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=BTC) where to fetch the _ETH-BTC_ price. Same logic for `req.add(""urlEUR"", ""<cryptocompareETHEURURL>"")` and `req.add(""urlUSD"", ""<cryptocompareETHUSDURL>"")`.
  ",partial,right
